/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 308.0, "minX": 0.0, "maxY": 32204.0, "series": [{"data": [[0.0, 308.0], [0.1, 326.0], [0.2, 331.0], [0.3, 331.0], [0.4, 350.0], [0.5, 352.0], [0.6, 357.0], [0.7, 359.0], [0.8, 371.0], [0.9, 374.0], [1.0, 376.0], [1.1, 377.0], [1.2, 382.0], [1.3, 383.0], [1.4, 383.0], [1.5, 386.0], [1.6, 387.0], [1.7, 387.0], [1.8, 390.0], [1.9, 395.0], [2.0, 400.0], [2.1, 401.0], [2.2, 404.0], [2.3, 405.0], [2.4, 406.0], [2.5, 407.0], [2.6, 407.0], [2.7, 408.0], [2.8, 409.0], [2.9, 409.0], [3.0, 409.0], [3.1, 411.0], [3.2, 412.0], [3.3, 417.0], [3.4, 417.0], [3.5, 424.0], [3.6, 425.0], [3.7, 429.0], [3.8, 429.0], [3.9, 429.0], [4.0, 430.0], [4.1, 430.0], [4.2, 433.0], [4.3, 435.0], [4.4, 435.0], [4.5, 441.0], [4.6, 441.0], [4.7, 441.0], [4.8, 442.0], [4.9, 443.0], [5.0, 443.0], [5.1, 443.0], [5.2, 444.0], [5.3, 444.0], [5.4, 445.0], [5.5, 447.0], [5.6, 447.0], [5.7, 449.0], [5.8, 449.0], [5.9, 451.0], [6.0, 452.0], [6.1, 454.0], [6.2, 454.0], [6.3, 455.0], [6.4, 458.0], [6.5, 460.0], [6.6, 460.0], [6.7, 467.0], [6.8, 467.0], [6.9, 468.0], [7.0, 469.0], [7.1, 470.0], [7.2, 470.0], [7.3, 472.0], [7.4, 473.0], [7.5, 474.0], [7.6, 474.0], [7.7, 475.0], [7.8, 479.0], [7.9, 482.0], [8.0, 484.0], [8.1, 485.0], [8.2, 489.0], [8.3, 491.0], [8.4, 492.0], [8.5, 493.0], [8.6, 494.0], [8.7, 495.0], [8.8, 508.0], [8.9, 510.0], [9.0, 521.0], [9.1, 522.0], [9.2, 531.0], [9.3, 531.0], [9.4, 532.0], [9.5, 553.0], [9.6, 555.0], [9.7, 557.0], [9.8, 558.0], [9.9, 558.0], [10.0, 560.0], [10.1, 561.0], [10.2, 563.0], [10.3, 563.0], [10.4, 582.0], [10.5, 588.0], [10.6, 589.0], [10.7, 590.0], [10.8, 590.0], [10.9, 590.0], [11.0, 592.0], [11.1, 597.0], [11.2, 598.0], [11.3, 601.0], [11.4, 601.0], [11.5, 605.0], [11.6, 610.0], [11.7, 612.0], [11.8, 614.0], [11.9, 614.0], [12.0, 627.0], [12.1, 628.0], [12.2, 629.0], [12.3, 630.0], [12.4, 632.0], [12.5, 633.0], [12.6, 633.0], [12.7, 634.0], [12.8, 636.0], [12.9, 636.0], [13.0, 638.0], [13.1, 638.0], [13.2, 639.0], [13.3, 639.0], [13.4, 640.0], [13.5, 640.0], [13.6, 641.0], [13.7, 641.0], [13.8, 642.0], [13.9, 642.0], [14.0, 645.0], [14.1, 646.0], [14.2, 648.0], [14.3, 651.0], [14.4, 656.0], [14.5, 657.0], [14.6, 658.0], [14.7, 659.0], [14.8, 661.0], [14.9, 662.0], [15.0, 665.0], [15.1, 682.0], [15.2, 709.0], [15.3, 718.0], [15.4, 721.0], [15.5, 725.0], [15.6, 726.0], [15.7, 731.0], [15.8, 743.0], [15.9, 752.0], [16.0, 763.0], [16.1, 764.0], [16.2, 768.0], [16.3, 768.0], [16.4, 772.0], [16.5, 772.0], [16.6, 775.0], [16.7, 775.0], [16.8, 776.0], [16.9, 777.0], [17.0, 783.0], [17.1, 783.0], [17.2, 784.0], [17.3, 786.0], [17.4, 786.0], [17.5, 788.0], [17.6, 789.0], [17.7, 791.0], [17.8, 792.0], [17.9, 792.0], [18.0, 792.0], [18.1, 793.0], [18.2, 793.0], [18.3, 793.0], [18.4, 794.0], [18.5, 794.0], [18.6, 794.0], [18.7, 795.0], [18.8, 795.0], [18.9, 795.0], [19.0, 796.0], [19.1, 797.0], [19.2, 797.0], [19.3, 797.0], [19.4, 797.0], [19.5, 797.0], [19.6, 798.0], [19.7, 798.0], [19.8, 799.0], [19.9, 799.0], [20.0, 801.0], [20.1, 801.0], [20.2, 802.0], [20.3, 802.0], [20.4, 804.0], [20.5, 805.0], [20.6, 805.0], [20.7, 805.0], [20.8, 806.0], [20.9, 806.0], [21.0, 807.0], [21.1, 807.0], [21.2, 809.0], [21.3, 810.0], [21.4, 811.0], [21.5, 811.0], [21.6, 811.0], [21.7, 812.0], [21.8, 812.0], [21.9, 812.0], [22.0, 813.0], [22.1, 813.0], [22.2, 813.0], [22.3, 813.0], [22.4, 814.0], [22.5, 815.0], [22.6, 815.0], [22.7, 815.0], [22.8, 816.0], [22.9, 816.0], [23.0, 817.0], [23.1, 818.0], [23.2, 818.0], [23.3, 819.0], [23.4, 820.0], [23.5, 820.0], [23.6, 821.0], [23.7, 821.0], [23.8, 822.0], [23.9, 822.0], [24.0, 822.0], [24.1, 822.0], [24.2, 824.0], [24.3, 825.0], [24.4, 826.0], [24.5, 828.0], [24.6, 828.0], [24.7, 829.0], [24.8, 831.0], [24.9, 831.0], [25.0, 833.0], [25.1, 834.0], [25.2, 835.0], [25.3, 835.0], [25.4, 836.0], [25.5, 836.0], [25.6, 838.0], [25.7, 839.0], [25.8, 841.0], [25.9, 841.0], [26.0, 847.0], [26.1, 847.0], [26.2, 849.0], [26.3, 850.0], [26.4, 856.0], [26.5, 860.0], [26.6, 864.0], [26.7, 865.0], [26.8, 868.0], [26.9, 871.0], [27.0, 871.0], [27.1, 874.0], [27.2, 875.0], [27.3, 876.0], [27.4, 878.0], [27.5, 882.0], [27.6, 888.0], [27.7, 889.0], [27.8, 897.0], [27.9, 900.0], [28.0, 900.0], [28.1, 903.0], [28.2, 909.0], [28.3, 970.0], [28.4, 976.0], [28.5, 977.0], [28.6, 986.0], [28.7, 986.0], [28.8, 1009.0], [28.9, 1012.0], [29.0, 1031.0], [29.1, 1032.0], [29.2, 1035.0], [29.3, 1071.0], [29.4, 1324.0], [29.5, 1326.0], [29.6, 1329.0], [29.7, 1341.0], [29.8, 1343.0], [29.9, 1375.0], [30.0, 1384.0], [30.1, 1385.0], [30.2, 1385.0], [30.3, 1386.0], [30.4, 1489.0], [30.5, 1494.0], [30.6, 1495.0], [30.7, 1497.0], [30.8, 1503.0], [30.9, 1505.0], [31.0, 1521.0], [31.1, 1531.0], [31.2, 1559.0], [31.3, 1560.0], [31.4, 1563.0], [31.5, 1566.0], [31.6, 1577.0], [31.7, 1583.0], [31.8, 1587.0], [31.9, 1587.0], [32.0, 1590.0], [32.1, 1590.0], [32.2, 1592.0], [32.3, 1593.0], [32.4, 1596.0], [32.5, 1600.0], [32.6, 1602.0], [32.7, 1603.0], [32.8, 1606.0], [32.9, 1627.0], [33.0, 1632.0], [33.1, 1633.0], [33.2, 1635.0], [33.3, 1635.0], [33.4, 1637.0], [33.5, 1637.0], [33.6, 1638.0], [33.7, 1638.0], [33.8, 1639.0], [33.9, 1639.0], [34.0, 1639.0], [34.1, 1640.0], [34.2, 1641.0], [34.3, 1641.0], [34.4, 1644.0], [34.5, 1644.0], [34.6, 1645.0], [34.7, 1648.0], [34.8, 1650.0], [34.9, 1654.0], [35.0, 1655.0], [35.1, 1657.0], [35.2, 1657.0], [35.3, 1662.0], [35.4, 1665.0], [35.5, 1665.0], [35.6, 1667.0], [35.7, 1667.0], [35.8, 1667.0], [35.9, 1668.0], [36.0, 1675.0], [36.1, 1680.0], [36.2, 1713.0], [36.3, 1724.0], [36.4, 1724.0], [36.5, 1729.0], [36.6, 1735.0], [36.7, 1743.0], [36.8, 1743.0], [36.9, 1744.0], [37.0, 1744.0], [37.1, 1746.0], [37.2, 1749.0], [37.3, 1774.0], [37.4, 1779.0], [37.5, 1788.0], [37.6, 1793.0], [37.7, 1794.0], [37.8, 1794.0], [37.9, 1795.0], [38.0, 1796.0], [38.1, 1797.0], [38.2, 1797.0], [38.3, 1854.0], [38.4, 1856.0], [38.5, 1859.0], [38.6, 1859.0], [38.7, 1859.0], [38.8, 1859.0], [38.9, 1862.0], [39.0, 1864.0], [39.1, 1911.0], [39.2, 1913.0], [39.3, 1918.0], [39.4, 1924.0], [39.5, 1926.0], [39.6, 1926.0], [39.7, 1934.0], [39.8, 1934.0], [39.9, 1937.0], [40.0, 1937.0], [40.1, 1940.0], [40.2, 1941.0], [40.3, 1942.0], [40.4, 2023.0], [40.5, 2042.0], [40.6, 2075.0], [40.7, 2082.0], [40.8, 2087.0], [40.9, 2090.0], [41.0, 2093.0], [41.1, 2094.0], [41.2, 2099.0], [41.3, 2099.0], [41.4, 2100.0], [41.5, 2104.0], [41.6, 2105.0], [41.7, 2107.0], [41.8, 2108.0], [41.9, 2109.0], [42.0, 2110.0], [42.1, 2111.0], [42.2, 2111.0], [42.3, 2114.0], [42.4, 2115.0], [42.5, 2120.0], [42.6, 2123.0], [42.7, 2127.0], [42.8, 2144.0], [42.9, 2154.0], [43.0, 2155.0], [43.1, 2156.0], [43.2, 2157.0], [43.3, 2158.0], [43.4, 2158.0], [43.5, 2161.0], [43.6, 2163.0], [43.7, 2166.0], [43.8, 2167.0], [43.9, 2191.0], [44.0, 2191.0], [44.1, 2192.0], [44.2, 2193.0], [44.3, 2193.0], [44.4, 2193.0], [44.5, 2193.0], [44.6, 2194.0], [44.7, 2194.0], [44.8, 2194.0], [44.9, 2206.0], [45.0, 2208.0], [45.1, 2210.0], [45.2, 2211.0], [45.3, 2213.0], [45.4, 2214.0], [45.5, 2218.0], [45.6, 2223.0], [45.7, 2226.0], [45.8, 2227.0], [45.9, 2236.0], [46.0, 2242.0], [46.1, 2247.0], [46.2, 2248.0], [46.3, 2257.0], [46.4, 2265.0], [46.5, 2266.0], [46.6, 2272.0], [46.7, 2275.0], [46.8, 2277.0], [46.9, 2283.0], [47.0, 2284.0], [47.1, 2284.0], [47.2, 2284.0], [47.3, 2290.0], [47.4, 2295.0], [47.5, 2299.0], [47.6, 2302.0], [47.7, 2335.0], [47.8, 2378.0], [47.9, 2385.0], [48.0, 2402.0], [48.1, 2408.0], [48.2, 2415.0], [48.3, 2426.0], [48.4, 2436.0], [48.5, 2463.0], [48.6, 2467.0], [48.7, 2471.0], [48.8, 2472.0], [48.9, 2506.0], [49.0, 2526.0], [49.1, 2538.0], [49.2, 2540.0], [49.3, 2542.0], [49.4, 2542.0], [49.5, 2543.0], [49.6, 2550.0], [49.7, 2578.0], [49.8, 2579.0], [49.9, 2587.0], [50.0, 2588.0], [50.1, 2590.0], [50.2, 2590.0], [50.3, 2592.0], [50.4, 2592.0], [50.5, 2596.0], [50.6, 2598.0], [50.7, 2600.0], [50.8, 2600.0], [50.9, 2603.0], [51.0, 2603.0], [51.1, 2607.0], [51.2, 2607.0], [51.3, 2610.0], [51.4, 2613.0], [51.5, 2616.0], [51.6, 2617.0], [51.7, 2620.0], [51.8, 2623.0], [51.9, 2624.0], [52.0, 2625.0], [52.1, 2626.0], [52.2, 2627.0], [52.3, 2627.0], [52.4, 2627.0], [52.5, 2628.0], [52.6, 2628.0], [52.7, 2628.0], [52.8, 2629.0], [52.9, 2630.0], [53.0, 2630.0], [53.1, 2631.0], [53.2, 2633.0], [53.3, 2634.0], [53.4, 2642.0], [53.5, 2694.0], [53.6, 2694.0], [53.7, 2700.0], [53.8, 2700.0], [53.9, 2706.0], [54.0, 2712.0], [54.1, 2715.0], [54.2, 2715.0], [54.3, 2718.0], [54.4, 2720.0], [54.5, 2723.0], [54.6, 2723.0], [54.7, 2727.0], [54.8, 2733.0], [54.9, 2743.0], [55.0, 2746.0], [55.1, 2753.0], [55.2, 2754.0], [55.3, 2812.0], [55.4, 2812.0], [55.5, 2814.0], [55.6, 2817.0], [55.7, 2819.0], [55.8, 2821.0], [55.9, 2822.0], [56.0, 2824.0], [56.1, 2826.0], [56.2, 2826.0], [56.3, 2827.0], [56.4, 2829.0], [56.5, 2830.0], [56.6, 2831.0], [56.7, 2832.0], [56.8, 2832.0], [56.9, 2835.0], [57.0, 2835.0], [57.1, 2836.0], [57.2, 2837.0], [57.3, 2840.0], [57.4, 2841.0], [57.5, 2842.0], [57.6, 2846.0], [57.7, 2877.0], [57.8, 2879.0], [57.9, 2880.0], [58.0, 2881.0], [58.1, 2886.0], [58.2, 2887.0], [58.3, 2891.0], [58.4, 2901.0], [58.5, 2917.0], [58.6, 2918.0], [58.7, 2925.0], [58.8, 2925.0], [58.9, 2926.0], [59.0, 2928.0], [59.1, 2931.0], [59.2, 2932.0], [59.3, 2935.0], [59.4, 2936.0], [59.5, 2958.0], [59.6, 2959.0], [59.7, 2961.0], [59.8, 2962.0], [59.9, 2965.0], [60.0, 2967.0], [60.1, 2967.0], [60.2, 2968.0], [60.3, 2969.0], [60.4, 2975.0], [60.5, 2982.0], [60.6, 2983.0], [60.7, 2986.0], [60.8, 2993.0], [60.9, 2994.0], [61.0, 2994.0], [61.1, 2997.0], [61.2, 2997.0], [61.3, 2999.0], [61.4, 3000.0], [61.5, 3003.0], [61.6, 3010.0], [61.7, 3040.0], [61.8, 3044.0], [61.9, 3151.0], [62.0, 3152.0], [62.1, 3155.0], [62.2, 3157.0], [62.3, 3160.0], [62.4, 3161.0], [62.5, 3162.0], [62.6, 3163.0], [62.7, 3171.0], [62.8, 3172.0], [62.9, 3192.0], [63.0, 3411.0], [63.1, 3413.0], [63.2, 3414.0], [63.3, 3417.0], [63.4, 3417.0], [63.5, 3420.0], [63.6, 3421.0], [63.7, 3422.0], [63.8, 3425.0], [63.9, 3429.0], [64.0, 3444.0], [64.1, 3536.0], [64.2, 3538.0], [64.3, 3543.0], [64.4, 3544.0], [64.5, 3551.0], [64.6, 3554.0], [64.7, 3556.0], [64.8, 3557.0], [64.9, 3563.0], [65.0, 3565.0], [65.1, 3574.0], [65.2, 3609.0], [65.3, 3627.0], [65.4, 3635.0], [65.5, 3637.0], [65.6, 3640.0], [65.7, 3643.0], [65.8, 3644.0], [65.9, 3647.0], [66.0, 3674.0], [66.1, 3692.0], [66.2, 3696.0], [66.3, 3794.0], [66.4, 3799.0], [66.5, 3804.0], [66.6, 3804.0], [66.7, 3805.0], [66.8, 3806.0], [66.9, 3806.0], [67.0, 3807.0], [67.1, 3810.0], [67.2, 3815.0], [67.3, 3845.0], [67.4, 3845.0], [67.5, 3846.0], [67.6, 3930.0], [67.7, 3932.0], [67.8, 3942.0], [67.9, 3945.0], [68.0, 3947.0], [68.1, 4035.0], [68.2, 4035.0], [68.3, 4037.0], [68.4, 4039.0], [68.5, 4087.0], [68.6, 4087.0], [68.7, 4091.0], [68.8, 4117.0], [68.9, 4141.0], [69.0, 4191.0], [69.1, 4198.0], [69.2, 4206.0], [69.3, 4229.0], [69.4, 4231.0], [69.5, 4264.0], [69.6, 4282.0], [69.7, 4310.0], [69.8, 4464.0], [69.9, 4468.0], [70.0, 4473.0], [70.1, 4522.0], [70.2, 4525.0], [70.3, 4550.0], [70.4, 4550.0], [70.5, 4552.0], [70.6, 4553.0], [70.7, 4554.0], [70.8, 4554.0], [70.9, 4558.0], [71.0, 4559.0], [71.1, 4561.0], [71.2, 4623.0], [71.3, 4631.0], [71.4, 4632.0], [71.5, 4634.0], [71.6, 4635.0], [71.7, 4643.0], [71.8, 4643.0], [71.9, 4645.0], [72.0, 4649.0], [72.1, 4791.0], [72.2, 4791.0], [72.3, 4793.0], [72.4, 4794.0], [72.5, 4798.0], [72.6, 4890.0], [72.7, 4894.0], [72.8, 4913.0], [72.9, 4937.0], [73.0, 4943.0], [73.1, 5002.0], [73.2, 5006.0], [73.3, 5009.0], [73.4, 5009.0], [73.5, 5012.0], [73.6, 5013.0], [73.7, 5023.0], [73.8, 5039.0], [73.9, 5041.0], [74.0, 5041.0], [74.1, 5043.0], [74.2, 5044.0], [74.3, 5046.0], [74.4, 5046.0], [74.5, 5047.0], [74.6, 5047.0], [74.7, 5047.0], [74.8, 5048.0], [74.9, 5048.0], [75.0, 5048.0], [75.1, 5054.0], [75.2, 5055.0], [75.3, 5057.0], [75.4, 5073.0], [75.5, 5076.0], [75.6, 5076.0], [75.7, 5077.0], [75.8, 5079.0], [75.9, 5089.0], [76.0, 5089.0], [76.1, 5090.0], [76.2, 5092.0], [76.3, 5093.0], [76.4, 5093.0], [76.5, 5127.0], [76.6, 5130.0], [76.7, 5133.0], [76.8, 5134.0], [76.9, 5135.0], [77.0, 5135.0], [77.1, 5138.0], [77.2, 5166.0], [77.3, 5219.0], [77.4, 5320.0], [77.5, 5324.0], [77.6, 5374.0], [77.7, 5376.0], [77.8, 5376.0], [77.9, 5379.0], [78.0, 5381.0], [78.1, 5382.0], [78.2, 5387.0], [78.3, 5390.0], [78.4, 5391.0], [78.5, 5404.0], [78.6, 5405.0], [78.7, 5428.0], [78.8, 5476.0], [78.9, 5519.0], [79.0, 5519.0], [79.1, 5519.0], [79.2, 5520.0], [79.3, 5523.0], [79.4, 5574.0], [79.5, 5574.0], [79.6, 5575.0], [79.7, 5577.0], [79.8, 5577.0], [79.9, 5577.0], [80.0, 5655.0], [80.1, 5659.0], [80.2, 5659.0], [80.3, 5660.0], [80.4, 5660.0], [80.5, 5661.0], [80.6, 5662.0], [80.7, 5663.0], [80.8, 5665.0], [80.9, 5675.0], [81.0, 5675.0], [81.1, 5691.0], [81.2, 5765.0], [81.3, 5767.0], [81.4, 5770.0], [81.5, 5771.0], [81.6, 5772.0], [81.7, 5862.0], [81.8, 5862.0], [81.9, 5865.0], [82.0, 5866.0], [82.1, 5867.0], [82.2, 5867.0], [82.3, 5867.0], [82.4, 5867.0], [82.5, 5868.0], [82.6, 5868.0], [82.7, 5870.0], [82.8, 5870.0], [82.9, 5873.0], [83.0, 5873.0], [83.1, 5873.0], [83.2, 5874.0], [83.3, 5875.0], [83.4, 5875.0], [83.5, 5876.0], [83.6, 5876.0], [83.7, 5877.0], [83.8, 5877.0], [83.9, 5881.0], [84.0, 5881.0], [84.1, 5881.0], [84.2, 5883.0], [84.3, 5901.0], [84.4, 5902.0], [84.5, 5903.0], [84.6, 5903.0], [84.7, 5904.0], [84.8, 5904.0], [84.9, 5905.0], [85.0, 5905.0], [85.1, 5905.0], [85.2, 5905.0], [85.3, 5906.0], [85.4, 5906.0], [85.5, 5908.0], [85.6, 5908.0], [85.7, 5911.0], [85.8, 5930.0], [85.9, 5933.0], [86.0, 5933.0], [86.1, 5935.0], [86.2, 5944.0], [86.3, 5950.0], [86.4, 5989.0], [86.5, 5991.0], [86.6, 5992.0], [86.7, 5992.0], [86.8, 5992.0], [86.9, 5994.0], [87.0, 5994.0], [87.1, 5994.0], [87.2, 5994.0], [87.3, 5995.0], [87.4, 5995.0], [87.5, 5996.0], [87.6, 5996.0], [87.7, 5997.0], [87.8, 5997.0], [87.9, 5998.0], [88.0, 5998.0], [88.1, 6001.0], [88.2, 6001.0], [88.3, 6003.0], [88.4, 6004.0], [88.5, 6005.0], [88.6, 6009.0], [88.7, 6108.0], [88.8, 6109.0], [88.9, 6110.0], [89.0, 6137.0], [89.1, 6185.0], [89.2, 6187.0], [89.3, 6189.0], [89.4, 6191.0], [89.5, 6191.0], [89.6, 6192.0], [89.7, 6192.0], [89.8, 6193.0], [89.9, 6194.0], [90.0, 6195.0], [90.1, 6196.0], [90.2, 6196.0], [90.3, 6198.0], [90.4, 6198.0], [90.5, 6199.0], [90.6, 6200.0], [90.7, 6228.0], [90.8, 6228.0], [90.9, 6230.0], [91.0, 6231.0], [91.1, 6285.0], [91.2, 6286.0], [91.3, 6286.0], [91.4, 6286.0], [91.5, 6288.0], [91.6, 6288.0], [91.7, 6290.0], [91.8, 6315.0], [91.9, 6322.0], [92.0, 6322.0], [92.1, 6322.0], [92.2, 6323.0], [92.3, 6323.0], [92.4, 6324.0], [92.5, 6378.0], [92.6, 6381.0], [92.7, 6383.0], [92.8, 6383.0], [92.9, 6386.0], [93.0, 6386.0], [93.1, 6388.0], [93.2, 6391.0], [93.3, 6394.0], [93.4, 6491.0], [93.5, 6515.0], [93.6, 6516.0], [93.7, 6520.0], [93.8, 6520.0], [93.9, 6524.0], [94.0, 6525.0], [94.1, 6563.0], [94.2, 6812.0], [94.3, 10689.0], [94.4, 10691.0], [94.5, 10692.0], [94.6, 10692.0], [94.7, 10694.0], [94.8, 10694.0], [94.9, 10697.0], [95.0, 10699.0], [95.1, 11188.0], [95.2, 11192.0], [95.3, 11250.0], [95.4, 11498.0], [95.5, 11829.0], [95.6, 12134.0], [95.7, 12776.0], [95.8, 13047.0], [95.9, 13275.0], [96.0, 13277.0], [96.1, 13277.0], [96.2, 13279.0], [96.3, 13281.0], [96.4, 13284.0], [96.5, 13289.0], [96.6, 13733.0], [96.7, 14729.0], [96.8, 15247.0], [96.9, 16084.0], [97.0, 16084.0], [97.1, 16225.0], [97.2, 16718.0], [97.3, 17725.0], [97.4, 18225.0], [97.5, 19219.0], [97.6, 19721.0], [97.7, 20140.0], [97.8, 20217.0], [97.9, 21114.0], [98.0, 21222.0], [98.1, 22246.0], [98.2, 22718.0], [98.3, 23101.0], [98.4, 23114.0], [98.5, 23714.0], [98.6, 24222.0], [98.7, 25217.0], [98.8, 26011.0], [98.9, 27108.0], [99.0, 27258.0], [99.1, 28095.0], [99.2, 28205.0], [99.3, 29205.0], [99.4, 29718.0], [99.5, 30713.0], [99.6, 31211.0], [99.7, 31355.0], [99.8, 31711.0], [99.9, 32091.0], [100.0, 32204.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 119.0, "series": [{"data": [[300.0, 30.0], [400.0, 101.0], [500.0, 38.0], [600.0, 59.0], [700.0, 71.0], [800.0, 119.0], [900.0, 14.0], [1000.0, 8.0], [1300.0, 15.0], [1400.0, 7.0], [1500.0, 25.0], [1600.0, 56.0], [1700.0, 30.0], [1800.0, 13.0], [1900.0, 19.0], [2000.0, 15.0], [2100.0, 52.0], [2200.0, 41.0], [2300.0, 6.0], [2400.0, 14.0], [2500.0, 27.0], [2600.0, 45.0], [2700.0, 24.0], [2800.0, 46.0], [2900.0, 45.0], [3000.0, 8.0], [3100.0, 16.0], [3400.0, 16.0], [3500.0, 17.0], [3600.0, 16.0], [3700.0, 3.0], [3800.0, 17.0], [3900.0, 7.0], [4000.0, 11.0], [4100.0, 6.0], [4200.0, 7.0], [4300.0, 2.0], [4400.0, 4.0], [4500.0, 17.0], [4600.0, 14.0], [4700.0, 7.0], [4800.0, 3.0], [5000.0, 51.0], [4900.0, 5.0], [5100.0, 11.0], [5200.0, 2.0], [5300.0, 17.0], [5400.0, 5.0], [5500.0, 17.0], [5600.0, 18.0], [5700.0, 8.0], [5800.0, 38.0], [5900.0, 57.0], [6000.0, 10.0], [6100.0, 28.0], [6200.0, 18.0], [6300.0, 24.0], [6400.0, 2.0], [6500.0, 10.0], [6800.0, 1.0], [7300.0, 1.0], [10600.0, 11.0], [11100.0, 3.0], [11200.0, 2.0], [11400.0, 1.0], [11600.0, 1.0], [11800.0, 1.0], [12100.0, 1.0], [12400.0, 1.0], [12700.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [13200.0, 10.0], [13700.0, 1.0], [14200.0, 1.0], [14700.0, 1.0], [15200.0, 1.0], [15700.0, 1.0], [16000.0, 3.0], [16200.0, 1.0], [16700.0, 1.0], [17200.0, 1.0], [17700.0, 1.0], [18200.0, 1.0], [18700.0, 1.0], [19200.0, 1.0], [19700.0, 1.0], [20000.0, 1.0], [20100.0, 1.0], [20200.0, 1.0], [20700.0, 1.0], [21100.0, 1.0], [21200.0, 1.0], [21700.0, 1.0], [22200.0, 1.0], [22700.0, 1.0], [23100.0, 3.0], [23200.0, 1.0], [23700.0, 1.0], [24200.0, 1.0], [24700.0, 1.0], [25200.0, 1.0], [26000.0, 1.0], [27200.0, 1.0], [26900.0, 1.0], [27100.0, 1.0], [28000.0, 2.0], [28200.0, 1.0], [28700.0, 1.0], [29200.0, 1.0], [29700.0, 1.0], [30200.0, 1.0], [30700.0, 1.0], [31200.0, 1.0], [31700.0, 2.0], [31300.0, 2.0], [32000.0, 1.0], [32200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 131.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1038.0, "series": [{"data": [[0.0, 131.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 331.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1038.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.55426418E12, "maxY": 577.6644429619757, "series": [{"data": [[1.55426418E12, 577.6644429619757], [1.55426424E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426424E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 381.5, "minX": 1.0, "maxY": 32204.0, "series": [{"data": [[2.0, 31777.0], [3.0, 31355.0], [4.0, 31306.0], [5.0, 32091.0], [6.0, 31711.0], [7.0, 31211.0], [8.0, 30713.0], [9.0, 30205.0], [10.0, 29718.0], [11.0, 29205.0], [12.0, 28704.0], [13.0, 28205.0], [14.0, 28095.0], [16.0, 27599.5], [17.0, 26912.0], [18.0, 27258.0], [19.0, 26011.0], [20.0, 25217.0], [21.0, 24711.0], [22.0, 24222.0], [23.0, 23714.0], [24.0, 23221.0], [25.0, 23114.0], [27.0, 23101.0], [28.0, 22718.0], [29.0, 22246.0], [30.0, 21723.0], [31.0, 21222.0], [33.0, 20725.0], [32.0, 21114.0], [35.0, 20140.0], [34.0, 20217.0], [37.0, 19721.0], [36.0, 20073.0], [39.0, 18719.0], [38.0, 19219.0], [41.0, 17725.0], [40.0, 18225.0], [43.0, 16718.0], [42.0, 17229.0], [45.0, 16089.0], [44.0, 16225.0], [47.0, 16084.0], [49.0, 15247.0], [48.0, 15727.0], [51.0, 14234.0], [50.0, 14729.0], [52.0, 13733.0], [54.0, 13289.0], [58.0, 13279.0], [60.0, 13279.75], [63.0, 13108.0], [62.0, 13276.0], [67.0, 12134.0], [66.0, 12477.0], [65.0, 12776.0], [64.0, 13047.0], [70.0, 11498.0], [69.0, 11668.0], [68.0, 11829.0], [75.0, 11172.0], [74.0, 11190.0], [72.0, 11248.5], [81.0, 10695.2], [80.0, 10695.0], [87.0, 7351.0], [86.0, 10691.0], [90.0, 6554.0], [89.0, 6563.0], [88.0, 6812.0], [92.0, 6524.5], [99.0, 6491.0], [98.0, 6518.166666666667], [103.0, 6378.0], [101.0, 6393.0], [100.0, 6492.0], [106.0, 6381.25], [114.0, 6387.4], [113.0, 6388.0], [112.0, 6386.5], [118.0, 6318.5], [123.0, 6323.0], [120.0, 6320.5], [125.0, 6286.0], [124.0, 6322.0], [135.0, 6236.0], [134.0, 6289.0], [133.0, 6288.0], [132.0, 6287.0], [131.0, 6286.0], [128.0, 6285.0], [143.0, 6187.0], [141.0, 6227.5], [139.0, 6229.25], [151.0, 6185.0], [145.0, 6187.0], [158.0, 6193.5], [155.0, 6191.0], [154.0, 6193.0], [153.0, 6191.0], [166.0, 6137.5], [164.0, 6200.0], [163.0, 6196.000000000001], [174.0, 6007.0], [170.0, 6109.5], [168.0, 6108.5], [179.0, 5997.0], [178.0, 6002.0], [191.0, 5996.333333333333], [190.0, 5998.0], [189.0, 5994.0], [186.0, 5992.0], [185.0, 5994.333333333333], [184.0, 5991.0], [196.0, 5992.0], [193.0, 5999.5], [205.0, 5995.571428571428], [204.0, 5993.0], [215.0, 5906.0], [214.0, 5934.333333333333], [211.0, 5931.666666666667], [208.0, 5946.666666666667], [222.0, 5902.714285714285], [227.0, 5905.4], [237.0, 5905.5], [236.0, 5904.0], [234.0, 5906.571428571428], [245.0, 5865.666666666666], [244.0, 5864.5], [249.0, 5871.333333333333], [248.0, 5866.0], [269.0, 5875.0], [268.0, 5877.299999999999], [262.0, 5873.666666666667], [260.0, 5867.0], [258.0, 5867.0], [257.0, 5866.0], [256.0, 5872.5], [285.0, 5690.5], [283.0, 5767.0], [282.0, 5772.0], [279.0, 5768.5], [275.0, 5876.333333333333], [302.0, 5577.0], [301.0, 5662.5], [297.0, 5657.8], [292.0, 5660.666666666667], [289.0, 5663.0], [288.0, 5675.0], [318.0, 5521.5], [317.0, 5519.25], [312.0, 5518.0], [311.0, 5519.0], [310.0, 5575.0], [309.0, 5577.0], [308.0, 5577.0], [306.0, 5574.0], [305.0, 5574.666666666667], [335.0, 5324.0], [334.0, 5321.5], [332.0, 5380.428571428572], [330.0, 5375.5], [323.0, 5374.0], [322.0, 5390.25], [349.0, 5089.0], [350.0, 5088.0], [348.0, 5134.0], [346.0, 5132.5], [344.0, 5135.0], [343.0, 5132.5], [339.0, 5134.0], [338.0, 5166.0], [337.0, 5217.5], [367.0, 5054.5], [365.0, 5075.0], [363.0, 5073.0], [362.0, 5079.0], [361.0, 5092.2], [356.0, 5083.166666666667], [383.0, 5047.75], [381.0, 5042.5], [380.0, 5044.0], [373.0, 5041.0], [370.0, 5047.333333333333], [395.0, 5137.333333333333], [392.0, 5218.5], [390.0, 5055.0], [389.0, 5133.2], [384.0, 5046.666666666667], [408.0, 4915.0], [414.0, 4793.333333333333], [403.0, 5111.5], [411.0, 4890.0], [410.0, 4890.0], [409.0, 4894.0], [407.0, 4913.0], [406.0, 4937.0], [405.0, 4943.0], [404.0, 4945.0], [431.0, 4627.0], [430.0, 4632.0], [427.0, 4634.5], [425.0, 4643.0], [421.0, 4647.666666666667], [418.0, 4793.5], [447.0, 4522.0], [446.0, 4525.0], [445.0, 4560.0], [444.0, 4558.0], [443.0, 4557.0], [441.0, 4552.25], [439.0, 4561.0], [432.0, 4623.0], [462.0, 4229.666666666667], [459.0, 4260.0], [457.0, 4282.0], [456.0, 4310.0], [454.0, 4464.0], [453.0, 4467.5], [451.0, 4473.0], [450.0, 4691.333333333333], [479.0, 4039.0], [478.0, 4035.0], [474.0, 4035.0], [473.0, 4089.3333333333335], [470.0, 4087.0], [469.0, 4117.0], [467.0, 4141.0], [466.0, 4196.75], [495.0, 3806.0], [492.0, 3844.6666666666665], [489.0, 3845.5], [487.0, 3930.6666666666665], [484.0, 3943.5], [482.0, 3947.0], [481.0, 3944.0], [480.0, 4036.0], [510.0, 3696.0], [511.0, 3674.0], [509.0, 3690.5], [497.0, 3811.0], [496.0, 3807.0], [507.0, 3761.0], [506.0, 3803.0], [504.0, 3806.0], [502.0, 3804.0], [501.0, 3804.0], [500.0, 3799.6666666666665], [543.0, 433.08333333333337], [538.0, 673.7391304347826], [539.0, 696.5], [542.0, 423.5], [541.0, 462.3333333333333], [540.0, 2053.0], [536.0, 1463.1666666666665], [519.0, 3639.3333333333335], [516.0, 3635.0], [515.0, 3643.3333333333335], [512.0, 3645.0], [525.0, 2938.0], [521.0, 3609.0], [520.0, 3610.0], [537.0, 423.42857142857144], [533.0, 430.4], [532.0, 381.5], [531.0, 438.375], [535.0, 1482.0], [534.0, 1992.25], [529.0, 1816.4444444444443], [548.0, 1078.6], [544.0, 1396.6666666666665], [545.0, 855.0], [550.0, 465.0], [549.0, 1200.5], [553.0, 1658.2], [556.0, 3165.5], [554.0, 3421.3333333333335], [558.0, 3157.0], [551.0, 482.3333333333333], [569.0, 3163.0], [568.0, 3169.3333333333335], [573.0, 3048.0], [563.0, 3158.25], [565.0, 3161.0], [564.0, 3153.0], [572.0, 3039.3333333333335], [547.0, 488.25], [546.0, 497.0], [607.0, 2935.0], [605.0, 2450.1111111111113], [591.0, 787.4], [577.0, 2997.0], [576.0, 3001.6666666666665], [582.0, 2998.0], [580.0, 2997.6666666666665], [590.0, 2983.6666666666665], [587.0, 2988.5], [585.0, 2997.0], [606.0, 631.0], [604.0, 640.25], [600.0, 619.75], [599.0, 642.0], [598.0, 2966.0], [597.0, 656.5], [595.0, 665.0], [594.0, 2967.3333333333335], [637.0, 2090.6666666666665], [639.0, 621.0], [636.0, 611.3333333333334], [633.0, 1196.6], [638.0, 614.0], [635.0, 1876.0], [632.0, 2549.1428571428573], [623.0, 1394.0], [611.0, 2473.6], [608.0, 598.5], [613.0, 1375.0], [612.0, 1782.5], [622.0, 1395.6666666666665], [619.0, 1397.3333333333335], [621.0, 2918.6666666666665], [618.0, 658.0], [616.0, 653.5], [617.0, 2927.5], [630.0, 605.0], [629.0, 635.0], [628.0, 640.0], [624.0, 1180.75], [625.0, 2887.0], [626.0, 2886.0], [645.0, 2186.714285714286], [643.0, 582.0], [647.0, 605.0], [642.0, 600.0], [641.0, 612.0], [640.0, 1343.3333333333333], [653.0, 2834.0], [651.0, 2823.3333333333335], [671.0, 2793.0], [659.0, 2833.0000000000005], [670.0, 2821.4], [665.0, 2831.5], [697.0, 2706.8571428571427], [700.0, 2646.0], [703.0, 2629.0], [699.0, 2629.5], [690.0, 2746.0], [689.0, 2717.0], [685.0, 2726.0], [673.0, 2748.5], [678.0, 2725.6666666666665], [675.0, 2716.5], [681.0, 2733.0], [680.0, 2719.0], [734.0, 2730.2], [732.0, 721.0], [733.0, 738.25], [729.0, 1994.0], [728.0, 682.0], [717.0, 2624.5], [707.0, 2623.0], [704.0, 2606.0], [713.0, 2633.0], [712.0, 2615.4], [726.0, 728.5], [725.0, 2150.0], [723.0, 1701.25], [721.0, 2627.0], [727.0, 2628.0], [764.0, 1217.0], [750.0, 838.0], [748.0, 2587.0], [747.0, 2590.0], [744.0, 2600.5], [765.0, 2091.75], [766.0, 1072.3333333333335], [763.0, 774.6666666666666], [762.0, 786.5], [767.0, 2506.0], [753.0, 2596.4], [761.0, 2543.6666666666665], [741.0, 2593.5], [739.0, 2592.0], [737.0, 2602.6666666666665], [755.0, 2579.0], [754.0, 2578.0], [792.0, 811.6], [769.0, 1346.6666666666665], [773.0, 1527.2222222222222], [774.0, 2447.0], [785.0, 1321.6666666666667], [799.0, 822.2], [784.0, 1724.5], [798.0, 814.6666666666666], [797.0, 1401.5], [796.0, 802.0], [794.0, 815.0], [795.0, 837.4], [793.0, 1167.5384615384614], [790.0, 1256.2857142857144], [788.0, 1541.5], [787.0, 808.2857142857142], [786.0, 1173.75], [771.0, 775.2], [772.0, 801.2857142857142], [768.0, 1636.5], [777.0, 2024.5], [778.0, 2415.0], [783.0, 1117.8], [782.0, 1207.875], [780.0, 1854.3333333333333], [781.0, 808.5], [779.0, 816.0], [803.0, 822.6], [800.0, 811.3636363636364], [804.0, 1040.846153846154], [801.0, 811.0], [802.0, 1626.8888888888891], [808.0, 823.0], [811.0, 2257.0], [810.0, 2251.333333333333], [814.0, 2248.0], [813.0, 2229.5], [815.0, 2227.0], [807.0, 813.1666666666667], [828.0, 2206.0], [818.0, 2219.0], [823.0, 2210.5], [822.0, 2214.0], [827.0, 2212.0], [806.0, 812.6666666666667], [805.0, 834.0], [857.0, 1204.5], [838.0, 866.1666666666667], [856.0, 2167.0], [837.0, 1671.2], [842.0, 1092.8333333333335], [841.0, 2192.0], [844.0, 2161.0], [847.0, 2162.0], [834.0, 2193.5], [845.0, 2158.0], [854.0, 1251.2857142857144], [853.0, 2154.6666666666665], [855.0, 2168.0], [852.0, 873.0], [859.0, 893.5], [858.0, 2115.0], [863.0, 2099.0], [849.0, 2154.0], [848.0, 2158.0], [861.0, 2106.0], [892.0, 2023.0], [879.0, 1507.0], [878.0, 2120.0], [877.0, 2124.0], [875.0, 2103.6666666666665], [872.0, 2108.8333333333335], [881.0, 1816.0], [882.0, 2099.0], [895.0, 2039.0], [893.0, 2023.0], [891.0, 2042.0], [890.0, 2075.0], [889.0, 2081.0], [871.0, 2104.5], [865.0, 2104.0], [887.0, 2089.75], [883.0, 2093.0], [920.0, 1859.4], [922.0, 1854.0], [923.0, 2163.0], [921.0, 1856.0], [915.0, 1859.0], [913.0, 1890.0], [911.0, 1865.5], [909.0, 1939.0], [903.0, 1930.1666666666667], [897.0, 1925.0], [896.0, 1938.0], [958.0, 1666.2], [953.0, 1666.0], [935.0, 1787.5], [933.0, 1793.0], [931.0, 1794.5], [929.0, 1794.0], [928.0, 1796.2], [949.0, 1675.0], [948.0, 1680.0], [947.0, 1687.0], [946.0, 1735.0], [944.0, 1743.0], [942.0, 1745.0], [936.0, 1774.0], [990.0, 1640.0], [973.0, 1475.5], [970.0, 1650.0], [969.0, 1641.0], [968.0, 1657.0], [991.0, 1321.5], [988.0, 1642.3333333333333], [985.0, 1636.0], [983.0, 1642.3333333333333], [980.0, 1636.0], [978.0, 1635.0], [974.0, 1657.0], [960.0, 1666.0], [965.0, 1636.75], [961.0, 1713.0], [967.0, 1648.0], [966.0, 1643.0], [1020.0, 1599.25], [1023.0, 1563.0], [1010.0, 978.4], [1022.0, 1559.5], [1016.0, 1888.0], [996.0, 1654.0], [995.0, 1640.5], [994.0, 1647.0], [1013.0, 1603.1666666666665], [1009.0, 1913.0], [1006.0, 1597.5], [1005.0, 1589.0], [1003.0, 1589.0], [1000.0, 1584.25], [1053.0, 1341.0], [1028.0, 1021.5], [1030.0, 1022.25], [1029.0, 1631.3333333333333], [1035.0, 1504.0], [1033.0, 1725.5], [1038.0, 1499.0], [1037.0, 1494.0], [1048.0, 1035.0], [1047.0, 1386.0], [1046.0, 1375.5], [1044.0, 1513.0], [1043.0, 1498.8333333333335], [1060.0, 1321.5], [1058.0, 1327.3333333333333], [1055.0, 1343.0], [1026.0, 1779.0], [1025.0, 1570.5], [1052.0, 1521.0], [1051.0, 1384.75], [1.0, 32204.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[577.2773333333334, 3674.1133333333323]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1060.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1.2166666666666666, "minX": 1.55426418E12, "maxY": 3022.983333333333, "series": [{"data": [[1.55426418E12, 1823.7833333333333], [1.55426424E12, 1.2166666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.55426418E12, 3022.983333333333], [1.55426424E12, 2.0166666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426424E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3655.080720480319, "minX": 1.55426418E12, "maxY": 32204.0, "series": [{"data": [[1.55426418E12, 3655.080720480319], [1.55426424E12, 32204.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426424E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3655.0800533689126, "minX": 1.55426418E12, "maxY": 32204.0, "series": [{"data": [[1.55426418E12, 3655.0800533689126], [1.55426424E12, 32204.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426424E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 829.8392261507673, "minX": 1.55426418E12, "maxY": 7343.0, "series": [{"data": [[1.55426418E12, 829.8392261507673], [1.55426424E12, 7343.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426424E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 308.0, "minX": 1.55426418E12, "maxY": 32204.0, "series": [{"data": [[1.55426418E12, 32091.0], [1.55426424E12, 32204.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.55426418E12, 308.0], [1.55426424E12, 32204.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.55426418E12, 6195.0], [1.55426424E12, 32204.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.55426418E12, 27258.0], [1.55426424E12, 32204.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.55426418E12, 10699.0], [1.55426424E12, 32204.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426424E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 648.0, "minX": 1.0, "maxY": 26015.5, "series": [{"data": [[8.0, 11248.5], [2.0, 23470.0], [138.0, 1632.0], [168.0, 5873.0], [11.0, 10692.0], [190.0, 2832.0], [192.0, 2191.0], [3.0, 16945.0], [13.0, 13279.0], [1.0, 19777.5], [4.0, 26015.5], [83.0, 6288.0], [5.0, 23114.0], [97.0, 3794.0], [426.0, 648.0], [119.0, 5012.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 426.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 648.0, "minX": 1.0, "maxY": 26015.5, "series": [{"data": [[8.0, 11248.5], [2.0, 23470.0], [138.0, 1632.0], [168.0, 5873.0], [11.0, 10692.0], [190.0, 2832.0], [192.0, 2191.0], [3.0, 16945.0], [13.0, 13279.0], [1.0, 19777.5], [4.0, 26015.5], [83.0, 6288.0], [5.0, 23114.0], [97.0, 3794.0], [426.0, 648.0], [119.0, 5012.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 426.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.55426418E12, "maxY": 25.0, "series": [{"data": [[1.55426418E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426418E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.55426418E12, "maxY": 24.983333333333334, "series": [{"data": [[1.55426418E12, 24.983333333333334], [1.55426424E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426424E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.55426418E12, "maxY": 24.983333333333334, "series": [{"data": [[1.55426418E12, 24.983333333333334], [1.55426424E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426424E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.55426418E12, "maxY": 24.983333333333334, "series": [{"data": [[1.55426418E12, 24.983333333333334], [1.55426424E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426424E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

