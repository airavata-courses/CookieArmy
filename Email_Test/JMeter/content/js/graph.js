/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 284.0, "minX": 0.0, "maxY": 71436.0, "series": [{"data": [[0.0, 284.0], [0.1, 285.0], [0.2, 286.0], [0.3, 286.0], [0.4, 290.0], [0.5, 292.0], [0.6, 292.0], [0.7, 294.0], [0.8, 294.0], [0.9, 299.0], [1.0, 303.0], [1.1, 304.0], [1.2, 305.0], [1.3, 305.0], [1.4, 306.0], [1.5, 308.0], [1.6, 313.0], [1.7, 315.0], [1.8, 351.0], [1.9, 352.0], [2.0, 353.0], [2.1, 353.0], [2.2, 354.0], [2.3, 355.0], [2.4, 356.0], [2.5, 359.0], [2.6, 361.0], [2.7, 361.0], [2.8, 369.0], [2.9, 371.0], [3.0, 374.0], [3.1, 380.0], [3.2, 382.0], [3.3, 383.0], [3.4, 385.0], [3.5, 386.0], [3.6, 388.0], [3.7, 389.0], [3.8, 389.0], [3.9, 389.0], [4.0, 398.0], [4.1, 409.0], [4.2, 423.0], [4.3, 428.0], [4.4, 429.0], [4.5, 429.0], [4.6, 430.0], [4.7, 430.0], [4.8, 431.0], [4.9, 431.0], [5.0, 433.0], [5.1, 434.0], [5.2, 434.0], [5.3, 436.0], [5.4, 438.0], [5.5, 440.0], [5.6, 440.0], [5.7, 443.0], [5.8, 451.0], [5.9, 473.0], [6.0, 479.0], [6.1, 479.0], [6.2, 480.0], [6.3, 480.0], [6.4, 480.0], [6.5, 482.0], [6.6, 482.0], [6.7, 483.0], [6.8, 483.0], [6.9, 484.0], [7.0, 484.0], [7.1, 486.0], [7.2, 487.0], [7.3, 487.0], [7.4, 488.0], [7.5, 488.0], [7.6, 493.0], [7.7, 493.0], [7.8, 494.0], [7.9, 495.0], [8.0, 498.0], [8.1, 499.0], [8.2, 499.0], [8.3, 503.0], [8.4, 505.0], [8.5, 506.0], [8.6, 509.0], [8.7, 510.0], [8.8, 538.0], [8.9, 545.0], [9.0, 547.0], [9.1, 553.0], [9.2, 554.0], [9.3, 556.0], [9.4, 558.0], [9.5, 558.0], [9.6, 560.0], [9.7, 564.0], [9.8, 564.0], [9.9, 566.0], [10.0, 566.0], [10.1, 568.0], [10.2, 568.0], [10.3, 568.0], [10.4, 570.0], [10.5, 570.0], [10.6, 570.0], [10.7, 571.0], [10.8, 572.0], [10.9, 572.0], [11.0, 573.0], [11.1, 574.0], [11.2, 575.0], [11.3, 577.0], [11.4, 577.0], [11.5, 578.0], [11.6, 579.0], [11.7, 580.0], [11.8, 623.0], [11.9, 635.0], [12.0, 636.0], [12.1, 642.0], [12.2, 650.0], [12.3, 666.0], [12.4, 675.0], [12.5, 676.0], [12.6, 688.0], [12.7, 688.0], [12.8, 689.0], [12.9, 690.0], [13.0, 690.0], [13.1, 691.0], [13.2, 691.0], [13.3, 694.0], [13.4, 695.0], [13.5, 696.0], [13.6, 704.0], [13.7, 706.0], [13.8, 707.0], [13.9, 708.0], [14.0, 710.0], [14.1, 711.0], [14.2, 746.0], [14.3, 753.0], [14.4, 763.0], [14.5, 771.0], [14.6, 782.0], [14.7, 783.0], [14.8, 784.0], [14.9, 785.0], [15.0, 791.0], [15.1, 796.0], [15.2, 801.0], [15.3, 803.0], [15.4, 811.0], [15.5, 813.0], [15.6, 815.0], [15.7, 820.0], [15.8, 821.0], [15.9, 828.0], [16.0, 833.0], [16.1, 838.0], [16.2, 839.0], [16.3, 869.0], [16.4, 869.0], [16.5, 870.0], [16.6, 872.0], [16.7, 877.0], [16.8, 884.0], [16.9, 885.0], [17.0, 891.0], [17.1, 919.0], [17.2, 929.0], [17.3, 936.0], [17.4, 940.0], [17.5, 942.0], [17.6, 943.0], [17.7, 943.0], [17.8, 944.0], [17.9, 946.0], [18.0, 947.0], [18.1, 947.0], [18.2, 948.0], [18.3, 949.0], [18.4, 949.0], [18.5, 949.0], [18.6, 950.0], [18.7, 950.0], [18.8, 951.0], [18.9, 957.0], [19.0, 963.0], [19.1, 970.0], [19.2, 975.0], [19.3, 984.0], [19.4, 989.0], [19.5, 990.0], [19.6, 991.0], [19.7, 993.0], [19.8, 996.0], [19.9, 1021.0], [20.0, 1024.0], [20.1, 1027.0], [20.2, 1032.0], [20.3, 1034.0], [20.4, 1039.0], [20.5, 1040.0], [20.6, 1040.0], [20.7, 1048.0], [20.8, 1049.0], [20.9, 1057.0], [21.0, 1085.0], [21.1, 1086.0], [21.2, 1095.0], [21.3, 1096.0], [21.4, 1096.0], [21.5, 1102.0], [21.6, 1103.0], [21.7, 1106.0], [21.8, 1107.0], [21.9, 1107.0], [22.0, 1108.0], [22.1, 1108.0], [22.2, 1109.0], [22.3, 1109.0], [22.4, 1110.0], [22.5, 1112.0], [22.6, 1112.0], [22.7, 1113.0], [22.8, 1117.0], [22.9, 1121.0], [23.0, 1122.0], [23.1, 1129.0], [23.2, 1129.0], [23.3, 1132.0], [23.4, 1134.0], [23.5, 1136.0], [23.6, 1153.0], [23.7, 1154.0], [23.8, 1158.0], [23.9, 1160.0], [24.0, 1163.0], [24.1, 1167.0], [24.2, 1168.0], [24.3, 1168.0], [24.4, 1171.0], [24.5, 1192.0], [24.6, 1207.0], [24.7, 1218.0], [24.8, 1222.0], [24.9, 1229.0], [25.0, 1248.0], [25.1, 1251.0], [25.2, 1256.0], [25.3, 1258.0], [25.4, 1267.0], [25.5, 1286.0], [25.6, 1286.0], [25.7, 1287.0], [25.8, 1287.0], [25.9, 1288.0], [26.0, 1288.0], [26.1, 1288.0], [26.2, 1290.0], [26.3, 1292.0], [26.4, 1298.0], [26.5, 1301.0], [26.6, 1302.0], [26.7, 1305.0], [26.8, 1305.0], [26.9, 1305.0], [27.0, 1308.0], [27.1, 1378.0], [27.2, 1380.0], [27.3, 1381.0], [27.4, 1381.0], [27.5, 1382.0], [27.6, 1383.0], [27.7, 1383.0], [27.8, 1384.0], [27.9, 1386.0], [28.0, 1392.0], [28.1, 1622.0], [28.2, 1624.0], [28.3, 1638.0], [28.4, 1639.0], [28.5, 1645.0], [28.6, 1647.0], [28.7, 1648.0], [28.8, 1655.0], [28.9, 1659.0], [29.0, 1663.0], [29.1, 1702.0], [29.2, 1705.0], [29.3, 1707.0], [29.4, 1708.0], [29.5, 1709.0], [29.6, 1710.0], [29.7, 1711.0], [29.8, 1713.0], [29.9, 1714.0], [30.0, 1716.0], [30.1, 1717.0], [30.2, 1719.0], [30.3, 1721.0], [30.4, 1724.0], [30.5, 1726.0], [30.6, 1726.0], [30.7, 1727.0], [30.8, 1727.0], [30.9, 1732.0], [31.0, 1734.0], [31.1, 1737.0], [31.2, 1738.0], [31.3, 1776.0], [31.4, 1777.0], [31.5, 1778.0], [31.6, 1779.0], [31.7, 1810.0], [31.8, 1821.0], [31.9, 1821.0], [32.0, 1822.0], [32.1, 1827.0], [32.2, 1828.0], [32.3, 1830.0], [32.4, 1831.0], [32.5, 2054.0], [32.6, 2571.0], [32.7, 2579.0], [32.8, 2696.0], [32.9, 2700.0], [33.0, 2763.0], [33.1, 2800.0], [33.2, 2804.0], [33.3, 2817.0], [33.4, 2822.0], [33.5, 2829.0], [33.6, 2837.0], [33.7, 2872.0], [33.8, 2904.0], [33.9, 2912.0], [34.0, 2928.0], [34.1, 2936.0], [34.2, 3042.0], [34.3, 3046.0], [34.4, 3053.0], [34.5, 3074.0], [34.6, 3121.0], [34.7, 3485.0], [34.8, 3485.0], [34.9, 3490.0], [35.0, 3493.0], [35.1, 3497.0], [35.2, 3502.0], [35.3, 3503.0], [35.4, 3505.0], [35.5, 3515.0], [35.6, 3517.0], [35.7, 3520.0], [35.8, 3525.0], [35.9, 3527.0], [36.0, 3536.0], [36.1, 3537.0], [36.2, 3540.0], [36.3, 3543.0], [36.4, 3573.0], [36.5, 3576.0], [36.6, 3585.0], [36.7, 3628.0], [36.8, 3660.0], [36.9, 3665.0], [37.0, 3668.0], [37.1, 3671.0], [37.2, 3671.0], [37.3, 3674.0], [37.4, 3675.0], [37.5, 3676.0], [37.6, 3681.0], [37.7, 3683.0], [37.8, 3690.0], [37.9, 3695.0], [38.0, 3696.0], [38.1, 3726.0], [38.2, 3728.0], [38.3, 3756.0], [38.4, 3763.0], [38.5, 3773.0], [38.6, 3780.0], [38.7, 3781.0], [38.8, 3783.0], [38.9, 3786.0], [39.0, 3854.0], [39.1, 3856.0], [39.2, 3860.0], [39.3, 3861.0], [39.4, 4184.0], [39.5, 4186.0], [39.6, 4188.0], [39.7, 4193.0], [39.8, 4193.0], [39.9, 4286.0], [40.0, 4305.0], [40.1, 4312.0], [40.2, 4313.0], [40.3, 4316.0], [40.4, 4325.0], [40.5, 4330.0], [40.6, 4332.0], [40.7, 4338.0], [40.8, 4340.0], [40.9, 4354.0], [41.0, 4358.0], [41.1, 4362.0], [41.2, 4372.0], [41.3, 4617.0], [41.4, 4617.0], [41.5, 4773.0], [41.6, 4775.0], [41.7, 4781.0], [41.8, 4819.0], [41.9, 4820.0], [42.0, 4962.0], [42.1, 4983.0], [42.2, 4990.0], [42.3, 4993.0], [42.4, 5002.0], [42.5, 5016.0], [42.6, 5490.0], [42.7, 5519.0], [42.8, 5522.0], [42.9, 5535.0], [43.0, 5541.0], [43.1, 5544.0], [43.2, 5545.0], [43.3, 5553.0], [43.4, 5560.0], [43.5, 5863.0], [43.6, 5869.0], [43.7, 5873.0], [43.8, 5879.0], [43.9, 5889.0], [44.0, 5894.0], [44.1, 5909.0], [44.2, 5925.0], [44.3, 5926.0], [44.4, 5929.0], [44.5, 5934.0], [44.6, 5940.0], [44.7, 5946.0], [44.8, 5949.0], [44.9, 5956.0], [45.0, 6019.0], [45.1, 6023.0], [45.2, 6026.0], [45.3, 6027.0], [45.4, 6030.0], [45.5, 6041.0], [45.6, 6048.0], [45.7, 6055.0], [45.8, 6058.0], [45.9, 6070.0], [46.0, 6078.0], [46.1, 6078.0], [46.2, 6101.0], [46.3, 6130.0], [46.4, 6315.0], [46.5, 6647.0], [46.6, 6648.0], [46.7, 6652.0], [46.8, 6653.0], [46.9, 6653.0], [47.0, 6658.0], [47.1, 6659.0], [47.2, 6661.0], [47.3, 6663.0], [47.4, 6663.0], [47.5, 6665.0], [47.6, 6673.0], [47.7, 6680.0], [47.8, 6683.0], [47.9, 6684.0], [48.0, 6693.0], [48.1, 6695.0], [48.2, 6699.0], [48.3, 6709.0], [48.4, 6723.0], [48.5, 6731.0], [48.6, 6743.0], [48.7, 6743.0], [48.8, 6745.0], [48.9, 6748.0], [49.0, 6748.0], [49.1, 6754.0], [49.2, 6765.0], [49.3, 6767.0], [49.4, 6769.0], [49.5, 6773.0], [49.6, 6783.0], [49.7, 6788.0], [49.8, 6790.0], [49.9, 6798.0], [50.0, 6803.0], [50.1, 6817.0], [50.2, 6888.0], [50.3, 6952.0], [50.4, 6968.0], [50.5, 6993.0], [50.6, 6994.0], [50.7, 7002.0], [50.8, 7002.0], [50.9, 7004.0], [51.0, 7007.0], [51.1, 7010.0], [51.2, 7014.0], [51.3, 7015.0], [51.4, 7016.0], [51.5, 7024.0], [51.6, 7025.0], [51.7, 7026.0], [51.8, 7029.0], [51.9, 7030.0], [52.0, 7033.0], [52.1, 7034.0], [52.2, 7034.0], [52.3, 7035.0], [52.4, 7035.0], [52.5, 7036.0], [52.6, 7042.0], [52.7, 7042.0], [52.8, 7049.0], [52.9, 7050.0], [53.0, 7052.0], [53.1, 7053.0], [53.2, 7057.0], [53.3, 7059.0], [53.4, 7060.0], [53.5, 7061.0], [53.6, 7063.0], [53.7, 7063.0], [53.8, 7066.0], [53.9, 7067.0], [54.0, 7068.0], [54.1, 7085.0], [54.2, 7100.0], [54.3, 7103.0], [54.4, 7105.0], [54.5, 7107.0], [54.6, 7110.0], [54.7, 7118.0], [54.8, 7120.0], [54.9, 7126.0], [55.0, 7132.0], [55.1, 7132.0], [55.2, 7137.0], [55.3, 7140.0], [55.4, 7145.0], [55.5, 7152.0], [55.6, 7154.0], [55.7, 7157.0], [55.8, 7160.0], [55.9, 7229.0], [56.0, 7230.0], [56.1, 7231.0], [56.2, 7239.0], [56.3, 7279.0], [56.4, 7286.0], [56.5, 7291.0], [56.6, 7296.0], [56.7, 7306.0], [56.8, 7314.0], [56.9, 7321.0], [57.0, 7342.0], [57.1, 7353.0], [57.2, 7491.0], [57.3, 7494.0], [57.4, 7494.0], [57.5, 7496.0], [57.6, 7501.0], [57.7, 7502.0], [57.8, 7502.0], [57.9, 7503.0], [58.0, 7504.0], [58.1, 7505.0], [58.2, 7508.0], [58.3, 7509.0], [58.4, 7511.0], [58.5, 7511.0], [58.6, 7512.0], [58.7, 7513.0], [58.8, 7516.0], [58.9, 7524.0], [59.0, 7524.0], [59.1, 7527.0], [59.2, 7530.0], [59.3, 7549.0], [59.4, 7585.0], [59.5, 7589.0], [59.6, 7602.0], [59.7, 7626.0], [59.8, 7652.0], [59.9, 7658.0], [60.0, 7676.0], [60.1, 7679.0], [60.2, 7698.0], [60.3, 7706.0], [60.4, 7708.0], [60.5, 7713.0], [60.6, 7714.0], [60.7, 7723.0], [60.8, 7725.0], [60.9, 7745.0], [61.0, 7746.0], [61.1, 7748.0], [61.2, 7749.0], [61.3, 7752.0], [61.4, 7752.0], [61.5, 7766.0], [61.6, 7767.0], [61.7, 7769.0], [61.8, 7771.0], [61.9, 7775.0], [62.0, 7812.0], [62.1, 7852.0], [62.2, 7905.0], [62.3, 7914.0], [62.4, 7915.0], [62.5, 7920.0], [62.6, 7922.0], [62.7, 7922.0], [62.8, 7923.0], [62.9, 7924.0], [63.0, 7925.0], [63.1, 7931.0], [63.2, 7933.0], [63.3, 7937.0], [63.4, 7938.0], [63.5, 7940.0], [63.6, 7947.0], [63.7, 7949.0], [63.8, 7957.0], [63.9, 8265.0], [64.0, 8326.0], [64.1, 8334.0], [64.2, 8369.0], [64.3, 8371.0], [64.4, 8390.0], [64.5, 8405.0], [64.6, 8406.0], [64.7, 8416.0], [64.8, 8416.0], [64.9, 8419.0], [65.0, 8438.0], [65.1, 8450.0], [65.2, 8458.0], [65.3, 8460.0], [65.4, 8493.0], [65.5, 8525.0], [65.6, 8526.0], [65.7, 8629.0], [65.8, 8639.0], [65.9, 9212.0], [66.0, 9220.0], [66.1, 9224.0], [66.2, 9252.0], [66.3, 9491.0], [66.4, 9504.0], [66.5, 9508.0], [66.6, 9524.0], [66.7, 9625.0], [66.8, 9673.0], [66.9, 9676.0], [67.0, 9703.0], [67.1, 9731.0], [67.2, 9758.0], [67.3, 10047.0], [67.4, 10061.0], [67.5, 10066.0], [67.6, 10108.0], [67.7, 10113.0], [67.8, 10122.0], [67.9, 10124.0], [68.0, 10133.0], [68.1, 10142.0], [68.2, 10150.0], [68.3, 10163.0], [68.4, 10181.0], [68.5, 10188.0], [68.6, 10191.0], [68.7, 10210.0], [68.8, 10284.0], [68.9, 10292.0], [69.0, 10294.0], [69.1, 10588.0], [69.2, 10594.0], [69.3, 10601.0], [69.4, 10651.0], [69.5, 10653.0], [69.6, 10744.0], [69.7, 10757.0], [69.8, 10873.0], [69.9, 10877.0], [70.0, 10878.0], [70.1, 10878.0], [70.2, 10878.0], [70.3, 10878.0], [70.4, 10878.0], [70.5, 10879.0], [70.6, 10879.0], [70.7, 10879.0], [70.8, 10880.0], [70.9, 10881.0], [71.0, 10890.0], [71.1, 10891.0], [71.2, 10893.0], [71.3, 10899.0], [71.4, 10910.0], [71.5, 11034.0], [71.6, 11109.0], [71.7, 11136.0], [71.8, 11144.0], [71.9, 11163.0], [72.0, 11169.0], [72.1, 11538.0], [72.2, 11539.0], [72.3, 11665.0], [72.4, 11665.0], [72.5, 11674.0], [72.6, 11680.0], [72.7, 11695.0], [72.8, 11701.0], [72.9, 11866.0], [73.0, 11879.0], [73.1, 11883.0], [73.2, 11887.0], [73.3, 11909.0], [73.4, 11920.0], [73.5, 11923.0], [73.6, 11993.0], [73.7, 12076.0], [73.8, 12133.0], [73.9, 12138.0], [74.0, 12138.0], [74.1, 12147.0], [74.2, 12161.0], [74.3, 12163.0], [74.4, 12164.0], [74.5, 12165.0], [74.6, 12165.0], [74.7, 12167.0], [74.8, 12168.0], [74.9, 12168.0], [75.0, 12169.0], [75.1, 12170.0], [75.2, 12171.0], [75.3, 12174.0], [75.4, 12174.0], [75.5, 12211.0], [75.6, 12212.0], [75.7, 12236.0], [75.8, 12241.0], [75.9, 12246.0], [76.0, 12250.0], [76.1, 12254.0], [76.2, 12263.0], [76.3, 12276.0], [76.4, 12278.0], [76.5, 12279.0], [76.6, 12280.0], [76.7, 12340.0], [76.8, 12344.0], [76.9, 12345.0], [77.0, 12348.0], [77.1, 12354.0], [77.2, 12355.0], [77.3, 12356.0], [77.4, 12365.0], [77.5, 12390.0], [77.6, 12393.0], [77.7, 12394.0], [77.8, 12397.0], [77.9, 12399.0], [78.0, 12406.0], [78.1, 12501.0], [78.2, 12543.0], [78.3, 12546.0], [78.4, 12548.0], [78.5, 12552.0], [78.6, 12552.0], [78.7, 12553.0], [78.8, 12558.0], [78.9, 12561.0], [79.0, 12562.0], [79.1, 12564.0], [79.2, 12567.0], [79.3, 12568.0], [79.4, 12570.0], [79.5, 12571.0], [79.6, 12571.0], [79.7, 12576.0], [79.8, 12576.0], [79.9, 12577.0], [80.0, 12579.0], [80.1, 12582.0], [80.2, 12584.0], [80.3, 12585.0], [80.4, 12589.0], [80.5, 12599.0], [80.6, 12610.0], [80.7, 12626.0], [80.8, 12628.0], [80.9, 12747.0], [81.0, 12790.0], [81.1, 12808.0], [81.2, 12817.0], [81.3, 12824.0], [81.4, 12826.0], [81.5, 12935.0], [81.6, 13576.0], [81.7, 13578.0], [81.8, 13581.0], [81.9, 13582.0], [82.0, 13587.0], [82.1, 13590.0], [82.2, 13591.0], [82.3, 13597.0], [82.4, 13598.0], [82.5, 13600.0], [82.6, 13606.0], [82.7, 13607.0], [82.8, 13630.0], [82.9, 13631.0], [83.0, 13632.0], [83.1, 13742.0], [83.2, 13743.0], [83.3, 13759.0], [83.4, 13764.0], [83.5, 13794.0], [83.6, 13821.0], [83.7, 13837.0], [83.8, 13887.0], [83.9, 13889.0], [84.0, 13892.0], [84.1, 13893.0], [84.2, 13894.0], [84.3, 13894.0], [84.4, 13903.0], [84.5, 13905.0], [84.6, 13907.0], [84.7, 13911.0], [84.8, 13912.0], [84.9, 13917.0], [85.0, 13958.0], [85.1, 13978.0], [85.2, 13990.0], [85.3, 14207.0], [85.4, 14474.0], [85.5, 14500.0], [85.6, 14502.0], [85.7, 14653.0], [85.8, 14657.0], [85.9, 14660.0], [86.0, 14680.0], [86.1, 14717.0], [86.2, 14758.0], [86.3, 14857.0], [86.4, 14858.0], [86.5, 15077.0], [86.6, 15078.0], [86.7, 15080.0], [86.8, 15083.0], [86.9, 15084.0], [87.0, 15087.0], [87.1, 15094.0], [87.2, 15096.0], [87.3, 15099.0], [87.4, 15102.0], [87.5, 15104.0], [87.6, 15106.0], [87.7, 15107.0], [87.8, 15109.0], [87.9, 15114.0], [88.0, 15219.0], [88.1, 15310.0], [88.2, 15311.0], [88.3, 15316.0], [88.4, 15321.0], [88.5, 16089.0], [88.6, 16497.0], [88.7, 16497.0], [88.8, 17080.0], [88.9, 17101.0], [89.0, 17108.0], [89.1, 17273.0], [89.2, 17297.0], [89.3, 17298.0], [89.4, 17303.0], [89.5, 18280.0], [89.6, 18302.0], [89.7, 18840.0], [89.8, 18844.0], [89.9, 18901.0], [90.0, 18901.0], [90.1, 18925.0], [90.2, 18926.0], [90.3, 18926.0], [90.4, 18928.0], [90.5, 18948.0], [90.6, 18949.0], [90.7, 18958.0], [90.8, 19331.0], [90.9, 19332.0], [91.0, 19335.0], [91.1, 19335.0], [91.2, 19337.0], [91.3, 19824.0], [91.4, 19832.0], [91.5, 19835.0], [91.6, 19838.0], [91.7, 19839.0], [91.8, 20052.0], [91.9, 20065.0], [92.0, 20093.0], [92.1, 20109.0], [92.2, 20135.0], [92.3, 20469.0], [92.4, 21501.0], [92.5, 22136.0], [92.6, 22310.0], [92.7, 22387.0], [92.8, 22507.0], [92.9, 22571.0], [93.0, 22713.0], [93.1, 22973.0], [93.2, 22973.0], [93.3, 22988.0], [93.4, 23000.0], [93.5, 23016.0], [93.6, 23100.0], [93.7, 23560.0], [93.8, 24570.0], [93.9, 25557.0], [94.0, 26062.0], [94.1, 27024.0], [94.2, 28030.0], [94.3, 28531.0], [94.4, 29529.0], [94.5, 30003.0], [94.6, 31042.0], [94.7, 32025.0], [94.8, 32536.0], [94.9, 33543.0], [95.0, 34037.0], [95.1, 35043.0], [95.2, 36094.0], [95.3, 36554.0], [95.4, 37596.0], [95.5, 38539.0], [95.6, 39011.0], [95.7, 40050.0], [95.8, 40662.0], [95.9, 41682.0], [96.0, 42529.0], [96.1, 43165.0], [96.2, 44026.0], [96.3, 45078.0], [96.4, 45634.0], [96.5, 46494.0], [96.6, 47018.0], [96.7, 48002.0], [96.8, 49025.0], [96.9, 49595.0], [97.0, 50496.0], [97.1, 51557.0], [97.2, 52033.0], [97.3, 52996.0], [97.4, 53523.0], [97.5, 54497.0], [97.6, 55000.0], [97.7, 55500.0], [97.8, 56494.0], [97.9, 57103.0], [98.0, 58092.0], [98.1, 59088.0], [98.2, 59588.0], [98.3, 60911.0], [98.4, 61833.0], [98.5, 62165.0], [98.6, 63165.0], [98.7, 63614.0], [98.8, 65121.0], [98.9, 65613.0], [99.0, 65921.0], [99.1, 66032.0], [99.2, 67283.0], [99.3, 67437.0], [99.4, 68430.0], [99.5, 68922.0], [99.6, 69279.0], [99.7, 69415.0], [99.8, 69920.0], [99.9, 70928.0], [100.0, 71436.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 68.0, "series": [{"data": [[65900.0, 2.0], [69900.0, 1.0], [34500.0, 1.0], [36500.0, 1.0], [38500.0, 1.0], [42500.0, 1.0], [48500.0, 1.0], [200.0, 15.0], [52500.0, 1.0], [52900.0, 1.0], [54900.0, 1.0], [58500.0, 1.0], [60900.0, 1.0], [62100.0, 1.0], [64100.0, 1.0], [67400.0, 1.0], [71400.0, 1.0], [300.0, 50.0], [400.0, 68.0], [500.0, 58.0], [600.0, 28.0], [700.0, 27.0], [800.0, 31.0], [900.0, 44.0], [1000.0, 27.0], [1100.0, 49.0], [1200.0, 32.0], [1300.0, 25.0], [1400.0, 1.0], [1600.0, 16.0], [1700.0, 41.0], [1800.0, 14.0], [2000.0, 1.0], [2100.0, 1.0], [2500.0, 3.0], [2600.0, 1.0], [2700.0, 4.0], [2800.0, 10.0], [2900.0, 7.0], [3000.0, 6.0], [3100.0, 2.0], [3400.0, 9.0], [3500.0, 23.0], [3600.0, 24.0], [3700.0, 14.0], [3800.0, 7.0], [4100.0, 8.0], [4200.0, 2.0], [4300.0, 20.0], [68900.0, 1.0], [4400.0, 1.0], [4600.0, 2.0], [4700.0, 6.0], [4800.0, 2.0], [4900.0, 7.0], [5000.0, 4.0], [5400.0, 1.0], [5500.0, 13.0], [5800.0, 10.0], [5900.0, 15.0], [6000.0, 18.0], [6100.0, 4.0], [6300.0, 1.0], [6600.0, 29.0], [6700.0, 28.0], [6800.0, 5.0], [6900.0, 7.0], [7000.0, 57.0], [7100.0, 27.0], [7200.0, 12.0], [7300.0, 9.0], [7400.0, 7.0], [7500.0, 32.0], [7600.0, 11.0], [7900.0, 27.0], [7700.0, 28.0], [7800.0, 3.0], [8200.0, 2.0], [8500.0, 3.0], [8300.0, 8.0], [8400.0, 16.0], [8600.0, 3.0], [8700.0, 1.0], [9200.0, 7.0], [9500.0, 5.0], [9400.0, 1.0], [9600.0, 5.0], [9700.0, 4.0], [10000.0, 6.0], [10100.0, 17.0], [10200.0, 6.0], [10300.0, 1.0], [10700.0, 3.0], [10500.0, 3.0], [10600.0, 5.0], [10900.0, 2.0], [10800.0, 26.0], [11000.0, 1.0], [11100.0, 8.0], [11500.0, 3.0], [11600.0, 9.0], [11700.0, 1.0], [11800.0, 7.0], [11900.0, 6.0], [12000.0, 2.0], [12100.0, 27.0], [12200.0, 19.0], [12300.0, 21.0], [12400.0, 3.0], [12500.0, 40.0], [12600.0, 5.0], [12700.0, 3.0], [12800.0, 6.0], [12900.0, 2.0], [13700.0, 7.0], [13800.0, 13.0], [13500.0, 15.0], [13600.0, 10.0], [13900.0, 15.0], [14200.0, 1.0], [14500.0, 3.0], [14400.0, 3.0], [14600.0, 6.0], [14700.0, 3.0], [14800.0, 4.0], [15100.0, 9.0], [15200.0, 2.0], [15000.0, 14.0], [15300.0, 7.0], [16000.0, 1.0], [16400.0, 3.0], [17000.0, 2.0], [17200.0, 5.0], [18200.0, 2.0], [18800.0, 3.0], [19800.0, 7.0], [20000.0, 6.0], [20400.0, 1.0], [22000.0, 1.0], [22200.0, 1.0], [22400.0, 1.0], [22600.0, 1.0], [23000.0, 3.0], [25000.0, 1.0], [26000.0, 1.0], [27000.0, 1.0], [28000.0, 1.0], [29000.0, 1.0], [30000.0, 1.0], [31000.0, 1.0], [32000.0, 1.0], [34000.0, 1.0], [36000.0, 1.0], [38000.0, 1.0], [40000.0, 1.0], [41600.0, 1.0], [42000.0, 1.0], [44000.0, 1.0], [45600.0, 1.0], [46000.0, 1.0], [46400.0, 1.0], [48000.0, 1.0], [50000.0, 1.0], [50400.0, 1.0], [52000.0, 1.0], [54000.0, 1.0], [54400.0, 1.0], [56400.0, 1.0], [57600.0, 1.0], [58000.0, 1.0], [60000.0, 1.0], [63600.0, 1.0], [65600.0, 2.0], [67200.0, 1.0], [70400.0, 1.0], [67900.0, 1.0], [33500.0, 1.0], [35500.0, 1.0], [37500.0, 1.0], [39500.0, 1.0], [43100.0, 1.0], [43500.0, 1.0], [47500.0, 1.0], [49500.0, 1.0], [51500.0, 1.0], [53500.0, 1.0], [55500.0, 1.0], [55900.0, 1.0], [57100.0, 1.0], [59500.0, 1.0], [63100.0, 1.0], [65100.0, 1.0], [69400.0, 1.0], [66900.0, 1.0], [70900.0, 1.0], [16500.0, 1.0], [17100.0, 2.0], [17300.0, 2.0], [18300.0, 1.0], [18700.0, 1.0], [18900.0, 14.0], [19300.0, 9.0], [20100.0, 3.0], [21500.0, 1.0], [22100.0, 1.0], [22300.0, 2.0], [22500.0, 2.0], [22700.0, 1.0], [22900.0, 6.0], [23100.0, 1.0], [23500.0, 1.0], [24100.0, 1.0], [24500.0, 1.0], [25500.0, 1.0], [26500.0, 1.0], [27500.0, 1.0], [28500.0, 1.0], [29500.0, 1.0], [30500.0, 1.0], [31500.0, 1.0], [32500.0, 1.0], [33000.0, 1.0], [35000.0, 1.0], [37000.0, 1.0], [39000.0, 1.0], [40600.0, 1.0], [41000.0, 1.0], [44600.0, 1.0], [45000.0, 1.0], [47000.0, 1.0], [49000.0, 1.0], [51000.0, 1.0], [55000.0, 1.0], [59000.0, 1.0], [61400.0, 1.0], [61800.0, 1.0], [62600.0, 1.0], [66000.0, 1.0], [68400.0, 1.0], [69200.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 71400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1143.0, "series": [{"data": [[0.0, 134.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 321.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1143.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 22.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.55426556E12, "maxY": 825.3076923076918, "series": [{"data": [[1.55426562E12, 253.74348697394802], [1.55426568E12, 2.0], [1.55426556E12, 825.3076923076918]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426568E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 298.5, "minX": 1.0, "maxY": 71436.0, "series": [{"data": [[2.0, 70928.0], [3.0, 70423.0], [4.0, 69920.0], [5.0, 69415.0], [6.0, 69289.0], [7.0, 69279.0], [8.0, 69278.0], [9.0, 68922.0], [10.0, 68430.0], [11.0, 67916.0], [12.0, 67437.0], [13.0, 67283.0], [14.0, 66924.0], [15.0, 66032.0], [16.0, 65938.0], [17.0, 65921.0], [19.0, 65611.0], [20.0, 65121.0], [21.0, 64112.0], [22.0, 63614.0], [23.0, 63165.0], [24.0, 62676.0], [25.0, 62165.0], [26.0, 61833.0], [27.0, 61430.0], [28.0, 60911.0], [29.0, 60094.0], [30.0, 59588.0], [31.0, 59088.0], [33.0, 58092.0], [32.0, 58590.0], [35.0, 57103.0], [34.0, 57602.0], [37.0, 55997.0], [36.0, 56494.0], [39.0, 55000.0], [38.0, 55500.0], [41.0, 54497.0], [40.0, 54978.0], [43.0, 53523.0], [42.0, 54002.0], [45.0, 52513.0], [44.0, 52996.0], [47.0, 51557.0], [46.0, 52033.0], [49.0, 50496.0], [48.0, 51039.0], [51.0, 49595.0], [50.0, 50046.0], [53.0, 48507.0], [52.0, 49025.0], [55.0, 47555.0], [54.0, 48002.0], [57.0, 46494.0], [56.0, 47018.0], [59.0, 45634.0], [58.0, 46003.0], [61.0, 44636.0], [60.0, 45078.0], [63.0, 43594.0], [62.0, 44026.0], [67.0, 41682.0], [66.0, 42050.0], [65.0, 42529.0], [64.0, 43165.0], [71.0, 39531.0], [70.0, 40050.0], [69.0, 40662.0], [68.0, 41044.0], [75.0, 37596.0], [74.0, 38044.0], [73.0, 38539.0], [72.0, 39011.0], [79.0, 35523.0], [78.0, 36094.0], [77.0, 36554.0], [76.0, 37067.0], [83.0, 33543.0], [82.0, 34037.0], [81.0, 34520.0], [80.0, 35043.0], [87.0, 31541.0], [86.0, 32025.0], [85.0, 32536.0], [84.0, 33024.0], [91.0, 29529.0], [90.0, 30003.0], [89.0, 30552.0], [88.0, 31042.0], [95.0, 27533.0], [94.0, 28030.0], [93.0, 28531.0], [92.0, 29025.0], [99.0, 25557.0], [98.0, 26062.0], [97.0, 26528.0], [96.0, 27024.0], [103.0, 23560.0], [102.0, 24134.0], [101.0, 24570.0], [100.0, 25063.0], [107.0, 23000.0], [106.0, 23096.0], [105.0, 23016.0], [104.0, 23100.0], [111.0, 22973.0], [110.0, 22988.0], [109.0, 22986.0], [108.0, 22991.0], [115.0, 22677.0], [114.0, 22713.0], [113.0, 22911.0], [112.0, 22973.0], [119.0, 22387.0], [118.0, 22417.0], [117.0, 22507.0], [116.0, 22571.0], [123.0, 22028.0], [122.0, 22136.0], [121.0, 22241.0], [120.0, 22310.0], [127.0, 20109.0], [126.0, 20093.0], [125.0, 20469.0], [124.0, 21501.0], [135.0, 19835.0], [134.0, 20029.0], [133.0, 20065.0], [132.0, 20076.0], [131.0, 20135.0], [130.0, 20139.0], [129.0, 20052.0], [128.0, 20095.0], [143.0, 19337.0], [142.0, 19338.0], [141.0, 19839.0], [140.0, 19824.0], [139.0, 19838.0], [138.0, 19839.0], [137.0, 19832.0], [136.0, 19835.0], [151.0, 18958.0], [150.0, 19333.5], [148.0, 19336.0], [147.0, 19333.0], [146.0, 19331.0], [145.0, 19335.0], [144.0, 19331.0], [159.0, 18925.5], [157.0, 18925.0], [156.0, 18928.0], [155.0, 18932.0], [154.0, 18949.0], [153.0, 18949.0], [152.0, 18948.0], [167.0, 18840.0], [166.0, 18844.0], [165.0, 18869.0], [164.0, 18903.0], [162.0, 18901.0], [161.0, 18926.0], [175.0, 17298.0], [174.0, 17300.0], [173.0, 17303.0], [172.0, 17297.0], [171.0, 18280.0], [170.0, 18283.0], [169.0, 18302.0], [168.0, 18783.0], [183.0, 16089.0], [182.0, 17091.0], [181.0, 17108.0], [180.0, 17080.0], [179.0, 17101.0], [178.0, 17272.0], [177.0, 17273.0], [176.0, 17293.0], [191.0, 15109.0], [190.0, 15109.0], [189.0, 15102.0], [188.0, 15105.0], [187.0, 16494.0], [186.0, 16513.0], [185.0, 16497.0], [184.0, 16497.0], [199.0, 15077.0], [198.0, 15083.0], [197.0, 15082.0], [196.0, 15080.0], [195.0, 15084.0], [194.0, 15087.0], [193.0, 15106.0], [192.0, 15104.0], [206.0, 15089.0], [205.0, 15086.0], [204.0, 15094.0], [203.0, 15098.0], [202.0, 15096.0], [201.0, 15078.5], [215.0, 15104.0], [213.0, 15313.5], [211.0, 15316.0], [209.0, 15316.0], [208.0, 15308.5], [223.0, 14857.0], [222.0, 14858.0], [221.0, 14880.0], [220.0, 14857.0], [219.0, 15114.0], [218.0, 15211.0], [217.0, 15219.0], [216.0, 15103.0], [231.0, 14653.0], [230.0, 14657.0], [229.0, 14660.0], [228.0, 14660.0], [227.0, 14680.0], [226.0, 14720.0], [225.0, 14717.0], [224.0, 14758.0], [239.0, 14207.0], [238.0, 14502.0], [237.0, 14500.0], [236.0, 14587.0], [235.0, 14446.0], [234.0, 14474.0], [233.0, 14476.0], [232.0, 14658.0], [247.0, 13905.0], [246.0, 13911.0], [245.0, 13905.0], [244.0, 13973.0], [243.0, 13978.0], [242.0, 13958.0], [241.0, 13980.0], [240.0, 13990.0], [255.0, 13917.0], [254.0, 13894.0], [253.0, 13901.0], [251.0, 13889.0], [250.0, 13892.0], [249.0, 13903.0], [248.0, 13907.0], [270.0, 13761.5], [271.0, 13630.0], [268.0, 13758.0], [259.0, 13900.5], [257.0, 13887.0], [256.0, 13915.0], [267.0, 13743.0], [266.0, 13742.0], [265.0, 13837.0], [264.0, 13901.0], [263.0, 13892.0], [262.0, 13894.0], [261.0, 13887.0], [260.0, 13893.0], [285.0, 13595.0], [287.0, 13585.5], [284.0, 13600.0], [282.0, 13591.0], [281.0, 13597.0], [280.0, 13631.0], [279.0, 13606.5], [277.0, 13619.5], [275.0, 13631.0], [274.0, 13598.0], [273.0, 13599.0], [272.0, 13653.0], [301.0, 12902.0], [302.0, 12824.0], [300.0, 12935.0], [291.0, 13582.0], [290.0, 13583.5], [288.0, 13587.0], [299.0, 13764.0], [298.0, 13794.0], [297.0, 13815.5], [295.0, 13581.0], [293.0, 13576.0], [292.0, 13581.0], [318.0, 12584.0], [319.0, 12587.0], [317.0, 12589.0], [316.0, 12599.0], [315.0, 12624.0], [313.0, 12610.0], [312.0, 12628.0], [311.0, 12634.0], [305.0, 12808.0], [304.0, 12817.5], [307.0, 12826.0], [306.0, 12817.0], [310.0, 12747.0], [309.0, 12749.0], [308.0, 12790.0], [335.0, 12571.0], [331.0, 12572.0], [329.0, 12559.0], [328.0, 12571.0], [326.0, 12573.0], [324.0, 12584.5], [322.0, 12581.333333333334], [350.0, 12552.0], [351.0, 12558.0], [349.0, 12561.5], [347.0, 12549.333333333334], [344.0, 12551.0], [341.0, 12563.0], [340.0, 12578.333333333334], [339.0, 12565.5], [336.0, 12568.0], [365.0, 12392.0], [366.0, 12389.0], [364.0, 12393.0], [355.0, 12497.0], [354.0, 12546.5], [352.0, 12552.0], [362.0, 12394.0], [361.0, 12397.0], [360.0, 12393.0], [359.0, 12399.0], [358.0, 12403.0], [357.0, 12406.0], [356.0, 12501.0], [371.0, 12278.5], [383.0, 12352.5], [381.0, 12341.5], [379.0, 12349.0], [377.0, 12355.0], [376.0, 12351.5], [374.0, 12365.0], [373.0, 12348.0], [372.0, 12275.0], [369.0, 12276.0], [368.0, 12279.0], [398.0, 12165.0], [399.0, 12166.0], [397.0, 12169.0], [395.0, 12164.5], [393.0, 12205.0], [391.0, 12244.0], [389.0, 12252.0], [387.0, 12260.5], [385.0, 12342.5], [414.0, 12228.0], [415.0, 12208.0], [413.0, 12236.0], [412.0, 12249.0], [411.0, 12174.0], [410.0, 12163.0], [409.0, 12166.5], [407.0, 12172.0], [403.0, 12171.5], [401.0, 12169.0], [405.0, 12166.0], [430.0, 11920.0], [431.0, 11916.0], [429.0, 11990.0], [428.0, 11993.0], [427.0, 12076.0], [426.0, 12082.0], [425.0, 12133.0], [424.0, 12134.0], [423.0, 12138.0], [417.0, 12211.0], [416.0, 12212.0], [419.0, 12148.0], [418.0, 12161.0], [422.0, 12138.0], [421.0, 12143.0], [420.0, 12147.0], [446.0, 11669.0], [447.0, 11662.0], [445.0, 11665.0], [444.0, 11674.0], [443.0, 11701.0], [442.0, 11695.0], [441.0, 11697.0], [440.0, 11866.0], [439.0, 11883.0], [433.0, 11909.0], [432.0, 11923.0], [435.0, 11879.0], [434.0, 11887.0], [438.0, 11879.0], [437.0, 11887.0], [436.0, 11882.0], [461.0, 11109.0], [462.0, 11034.0], [460.0, 11128.0], [451.0, 11539.0], [450.0, 11665.0], [449.0, 11675.0], [448.0, 11680.0], [459.0, 11136.0], [458.0, 11141.0], [457.0, 11144.0], [456.0, 11163.0], [455.0, 11169.0], [454.0, 11164.0], [453.0, 11537.0], [452.0, 11538.0], [479.0, 10878.25], [494.0, 10637.0], [495.0, 10601.0], [493.0, 10653.0], [492.0, 10651.0], [491.0, 10658.0], [490.0, 10887.666666666666], [488.0, 10878.666666666666], [487.0, 10880.666666666666], [481.0, 10880.0], [480.0, 10881.0], [486.0, 10879.0], [510.0, 10188.0], [511.0, 2829.0], [508.0, 5260.5], [509.0, 10210.0], [507.0, 10262.0], [506.0, 10284.0], [505.0, 10292.666666666666], [502.0, 10560.0], [499.0, 10757.0], [498.0, 10588.0], [497.0, 10591.0], [496.0, 10594.0], [500.0, 10750.0], [516.0, 2807.5], [522.0, 1057.1538461538462], [525.0, 1380.888888888889], [530.0, 5179.0], [523.0, 5182.5], [524.0, 10117.0], [529.0, 5170.5], [528.0, 10133.0], [543.0, 9252.0], [542.0, 9283.0], [541.0, 9597.0], [540.0, 9625.0], [539.0, 9664.0], [538.0, 9673.0], [537.0, 9676.0], [536.0, 9703.0], [518.0, 10191.0], [517.0, 10122.0], [531.0, 3549.6666666666665], [532.0, 2740.75], [535.0, 9695.0], [534.0, 9710.0], [533.0, 9731.0], [526.0, 298.5], [512.0, 5285.0], [513.0, 10190.0], [527.0, 10087.5], [521.0, 828.7142857142858], [520.0, 10133.0], [515.0, 2823.5], [514.0, 5274.0], [568.0, 2443.25], [574.0, 3112.0], [546.0, 3424.0], [545.0, 9524.0], [544.0, 9238.0], [547.0, 9504.0], [549.0, 9504.0], [548.0, 9491.0], [551.0, 9220.0], [550.0, 9212.0], [559.0, 8493.0], [558.0, 8525.0], [557.0, 8613.0], [556.0, 8629.0], [555.0, 8639.0], [554.0, 8727.0], [553.0, 9214.0], [552.0, 9224.0], [575.0, 2019.6], [560.0, 8486.0], [562.0, 8438.0], [561.0, 8450.0], [571.0, 1764.6666666666665], [573.0, 8405.0], [572.0, 8406.0], [567.0, 4480.5], [563.0, 4425.0], [564.0, 4429.0], [565.0, 8419.0], [566.0, 8457.0], [569.0, 4429.5], [570.0, 8416.0], [583.0, 1469.25], [577.0, 4402.5], [576.0, 1792.6666666666665], [591.0, 7921.333333333333], [578.0, 3102.3333333333335], [579.0, 3083.6666666666665], [582.0, 3082.3333333333335], [581.0, 1253.7], [580.0, 4409.0], [598.0, 480.0], [599.0, 8232.5], [596.0, 1541.4285714285713], [597.0, 2974.0], [594.0, 2343.5], [593.0, 7914.0], [592.0, 7921.0], [595.0, 7915.0], [606.0, 1985.8], [605.0, 7954.0], [604.0, 7937.0], [603.0, 7922.0], [602.0, 7921.0], [600.0, 7933.0], [607.0, 7938.0], [590.0, 483.3333333333333], [586.0, 484.0], [585.0, 7931.0], [588.0, 7923.0], [587.0, 7927.5], [636.0, 7725.0], [621.0, 1968.0], [618.0, 2320.5], [617.0, 7775.0], [616.0, 7776.0], [620.0, 7769.0], [619.0, 7769.0], [615.0, 2334.25], [614.0, 7852.0], [613.0, 7852.0], [612.0, 8259.0], [611.0, 8265.0], [610.0, 7941.333333333333], [623.0, 7768.0], [622.0, 7767.0], [633.0, 7750.0], [632.0, 7752.0], [639.0, 7714.0], [625.0, 7749.0], [624.0, 7752.0], [627.0, 7744.0], [626.0, 7749.0], [629.0, 7745.0], [628.0, 7753.0], [631.0, 7745.0], [630.0, 7748.0], [638.0, 7708.0], [637.0, 7721.0], [635.0, 7723.0], [634.0, 7746.0], [655.0, 1974.2], [653.0, 2338.75], [654.0, 7585.0], [652.0, 1213.090909090909], [648.0, 1737.0], [649.0, 7658.0], [651.0, 7652.0], [650.0, 7657.0], [658.0, 1748.1666666666665], [661.0, 564.0], [659.0, 2900.0], [657.0, 1989.0], [669.0, 4038.5], [656.0, 7585.0], [668.0, 572.0], [666.0, 568.0], [664.0, 573.0], [644.0, 2407.75], [643.0, 7707.0], [645.0, 7692.0], [647.0, 7676.0], [646.0, 7679.0], [642.0, 4189.5], [641.0, 4178.0], [640.0, 7709.0], [700.0, 7306.0], [674.0, 568.0], [679.0, 7510.0], [675.0, 7509.0], [687.0, 7504.2], [686.0, 7497.0], [685.0, 7513.0], [680.0, 7520.5], [703.0, 7286.0], [688.0, 7505.333333333333], [691.0, 7503.666666666667], [690.0, 7513.0], [693.0, 7508.727272727273], [692.0, 7517.0], [695.0, 7342.0], [694.0, 7905.0], [702.0, 7313.0], [701.0, 7314.0], [699.0, 7321.0], [698.0, 7327.0], [697.0, 7342.0], [696.0, 7353.0], [729.0, 1972.4], [719.0, 1435.7777777777778], [704.0, 7300.0], [706.0, 7296.0], [705.0, 7291.0], [708.0, 7279.0], [707.0, 7286.0], [710.0, 7230.0], [709.0, 7256.0], [728.0, 2874.6666666666665], [711.0, 7231.0], [726.0, 2836.6666666666665], [727.0, 3921.5], [725.0, 3910.5], [723.0, 2334.5], [722.0, 5007.333333333333], [724.0, 2873.6666666666665], [721.0, 742.4], [718.0, 1782.6666666666665], [717.0, 3925.0], [716.0, 3971.0], [714.0, 2062.8], [713.0, 7229.0], [712.0, 7239.0], [715.0, 7230.0], [730.0, 2328.75], [731.0, 7123.0], [733.0, 7120.0], [732.0, 7107.0], [735.0, 7112.0], [720.0, 7154.0], [734.0, 7105.0], [764.0, 1707.5714285714284], [767.0, 7066.0], [753.0, 7050.0], [752.0, 7049.0], [755.0, 7063.0], [754.0, 7042.0], [757.0, 7027.0], [756.0, 7040.0], [766.0, 7076.0], [765.0, 7066.0], [763.0, 7052.0], [762.0, 7024.0], [761.0, 7034.0], [760.0, 7052.0], [751.0, 7042.0], [737.0, 7145.0], [736.0, 7103.0], [739.0, 7099.0], [738.0, 7126.0], [741.0, 7144.0], [740.0, 7107.0], [743.0, 7100.0], [742.0, 7105.0], [750.0, 7036.0], [749.0, 7067.0], [748.0, 7061.0], [747.0, 7053.0], [746.0, 7053.0], [745.0, 7063.0], [744.0, 7062.0], [759.0, 7026.0], [758.0, 7026.0], [792.0, 7063.0], [797.0, 7035.0], [779.0, 1712.857142857143], [778.0, 7034.0], [777.0, 7014.0], [776.0, 7004.0], [781.0, 7002.0], [780.0, 7030.0], [783.0, 7011.0], [769.0, 7059.0], [768.0, 7085.0], [771.0, 7030.0], [770.0, 7046.0], [773.0, 7005.0], [772.0, 6993.0], [775.0, 7015.0], [774.0, 7029.0], [782.0, 6984.0], [788.0, 846.0], [787.0, 6960.0], [786.0, 6999.0], [784.0, 6968.0], [789.0, 7010.0], [791.0, 7007.0], [790.0, 7057.0], [799.0, 7033.0], [798.0, 7034.0], [796.0, 7030.0], [794.0, 7060.0], [793.0, 7060.0], [828.0, 6745.0], [813.0, 2349.75], [801.0, 3934.0], [800.0, 7033.0], [803.0, 7019.0], [802.0, 7025.0], [805.0, 7010.0], [804.0, 7015.0], [815.0, 6800.0], [814.0, 6778.0], [808.0, 3881.0], [812.0, 3838.0], [811.0, 1711.7142857142858], [809.0, 2370.75], [810.0, 6803.0], [807.0, 3903.0], [825.0, 6748.0], [824.0, 6751.0], [827.0, 6746.0], [826.0, 6767.0], [829.0, 6731.0], [806.0, 3903.5], [831.0, 6748.0], [817.0, 6783.0], [816.0, 6773.0], [819.0, 6798.0], [818.0, 6784.0], [821.0, 6754.0], [820.0, 6767.0], [823.0, 6765.0], [822.0, 6769.0], [830.0, 6743.0], [861.0, 6654.0], [855.0, 2364.25], [854.0, 6637.0], [853.0, 6647.0], [852.0, 6736.0], [851.0, 6685.0], [850.0, 6653.0], [849.0, 6652.0], [848.0, 6658.0], [863.0, 6665.0], [862.0, 6663.0], [860.0, 6663.0], [859.0, 6661.0], [858.0, 6658.0], [857.0, 6648.0], [856.0, 6662.0], [839.0, 6699.0], [838.0, 6695.0], [837.0, 6710.0], [836.0, 6709.0], [835.0, 6723.0], [834.0, 6743.0], [833.0, 6743.0], [832.0, 6758.0], [847.0, 6684.0], [846.0, 6681.0], [845.0, 6680.0], [844.0, 6683.0], [843.0, 6694.0], [842.0, 6673.0], [841.0, 6693.0], [840.0, 6700.0], [892.0, 3463.0], [895.0, 5956.0], [880.0, 6041.0], [883.0, 6108.0], [882.0, 6049.0], [885.0, 6078.0], [884.0, 6101.0], [894.0, 5946.0], [893.0, 5943.0], [891.0, 6019.0], [890.0, 6023.0], [889.0, 6025.0], [888.0, 6030.0], [879.0, 6027.0], [865.0, 6659.0], [864.0, 6670.0], [867.0, 6653.0], [866.0, 6650.0], [869.0, 6315.0], [868.0, 6652.0], [871.0, 6055.0], [870.0, 6101.0], [878.0, 6026.0], [877.0, 6130.0], [876.0, 6058.0], [875.0, 6064.0], [874.0, 6078.0], [873.0, 6070.0], [872.0, 6072.0], [887.0, 6028.0], [886.0, 6036.0], [924.0, 5541.0], [896.0, 3472.5], [897.0, 5949.0], [899.0, 5938.0], [898.0, 5926.0], [901.0, 5940.0], [900.0, 5934.0], [903.0, 5928.0], [902.0, 5929.0], [911.0, 5909.0], [910.0, 5873.0], [909.0, 5866.0], [908.0, 5876.0], [907.0, 5898.0], [906.0, 5885.0], [905.0, 5921.0], [904.0, 5925.0], [927.0, 5520.0], [913.0, 5863.0], [912.0, 5879.0], [915.0, 5869.0], [914.0, 5894.0], [917.0, 5543.0], [916.0, 5889.0], [919.0, 5560.0], [918.0, 5544.0], [926.0, 5545.0], [925.0, 5549.0], [923.0, 5553.0], [922.0, 5539.0], [921.0, 5535.0], [920.0, 5560.0], [955.0, 2117.0], [944.0, 1583.0], [953.0, 1419.875], [954.0, 4365.0], [948.0, 2247.666666666667], [947.0, 1599.3333333333335], [940.0, 2561.0], [938.0, 4973.0], [937.0, 4962.0], [936.0, 5002.0], [942.0, 4819.0], [941.0, 4956.0], [952.0, 4437.0], [935.0, 4992.0], [934.0, 4993.0], [933.0, 5004.0], [932.0, 5016.0], [931.0, 5043.0], [930.0, 5490.0], [929.0, 5522.0], [928.0, 5519.0], [943.0, 4820.0], [945.0, 1906.75], [946.0, 4779.0], [949.0, 1911.5], [951.0, 4617.0], [950.0, 4617.0], [959.0, 4345.0], [958.0, 4354.0], [957.0, 4355.0], [956.0, 4358.0], [967.0, 4325.0], [987.0, 2420.0], [968.0, 2087.0], [970.0, 4312.0], [969.0, 4313.0], [972.0, 4305.0], [971.0, 4316.0], [974.0, 4286.0], [973.0, 4297.0], [984.0, 3854.0], [966.0, 4322.0], [965.0, 4330.0], [964.0, 4326.0], [963.0, 4332.0], [962.0, 4336.0], [961.0, 4338.0], [960.0, 4340.0], [975.0, 4193.0], [989.0, 1489.3333333333335], [986.0, 2425.0], [985.0, 1446.1666666666667], [982.0, 2568.5], [981.0, 4186.0], [980.0, 4187.0], [979.0, 4194.0], [978.0, 4193.0], [977.0, 4193.0], [983.0, 3882.0], [991.0, 3782.0], [990.0, 3784.0], [988.0, 3856.0], [1020.0, 3671.0], [1007.0, 2330.0], [993.0, 3786.0], [992.0, 3781.0], [995.0, 3783.0], [994.0, 3780.0], [997.0, 3773.0], [996.0, 3777.0], [999.0, 3761.0], [998.0, 3763.0], [1006.0, 3696.0], [1005.0, 3696.0], [1004.0, 3696.0], [1003.0, 3728.0], [1002.0, 3726.0], [1001.0, 3742.0], [1000.0, 3756.0], [1023.0, 2328.0], [1009.0, 3689.0], [1008.0, 3695.0], [1011.0, 3675.0], [1010.0, 3676.0], [1013.0, 3680.0], [1012.0, 3683.0], [1015.0, 3681.0], [1014.0, 3674.0], [1022.0, 3676.0], [1021.0, 3673.0], [1019.0, 3667.0], [1018.0, 3671.0], [1017.0, 3671.0], [1016.0, 3668.0], [1034.0, 3537.0], [1072.0, 1974.0], [1038.0, 3527.0], [1036.0, 3543.0], [1032.0, 3541.0], [1030.0, 3573.0], [1028.0, 3585.0], [1026.0, 3628.0], [1024.0, 3665.0], [1054.0, 3505.0], [1052.0, 3491.0], [1050.0, 3502.0], [1048.0, 3497.0], [1046.0, 3505.0], [1044.0, 3520.0], [1042.0, 3526.0], [1070.0, 1988.0], [1066.0, 3042.0], [1068.0, 2928.0], [1056.0, 3489.0], [1058.0, 3485.0], [1060.0, 3100.0], [1062.0, 3121.0], [1064.0, 3048.0], [1086.0, 2733.0], [1082.0, 2872.0], [1080.0, 2817.0], [1078.0, 2819.0], [1076.0, 2829.0], [1074.0, 2837.0], [1090.0, 2579.0], [1120.0, 1113.3846153846152], [1118.0, 1114.4], [1114.0, 1105.7142857142856], [1110.0, 1821.0], [1088.0, 2763.0], [1092.0, 2579.0], [1096.0, 1827.0], [1094.0, 2054.0], [1098.0, 1777.0], [1140.0, 1720.5], [1102.0, 1816.0], [1146.0, 1702.0], [1148.0, 1709.0], [1150.0, 1705.0], [1130.0, 1719.0], [1134.0, 1727.75], [1124.0, 1438.5], [1202.0, 1264.3333333333333], [1210.0, 1267.0], [1156.0, 1154.0], [1170.0, 1383.0], [1154.0, 1652.5], [1178.0, 1381.7142857142856], [1166.0, 1425.0], [1164.0, 1645.0], [1160.0, 1659.0], [1204.0, 1308.0], [1208.0, 1290.0], [1212.0, 1206.3333333333333], [1188.0, 1289.0], [1196.0, 1281.0], [1214.0, 1248.0], [1220.0, 1229.0], [1218.0, 1225.0], [1216.0, 1231.0], [1031.0, 3573.0], [1073.0, 1504.5], [1083.0, 2804.0], [1065.0, 1708.6666666666665], [1039.0, 3527.0], [1037.0, 3536.0], [1035.0, 3537.0], [1033.0, 3540.0], [1029.0, 3576.0], [1027.0, 3615.0], [1025.0, 3628.0], [1055.0, 3490.0], [1053.0, 3493.0], [1051.0, 3499.0], [1049.0, 3503.0], [1047.0, 3509.0], [1045.0, 3515.0], [1043.0, 3517.0], [1041.0, 3522.5], [1071.0, 2912.0], [1069.0, 1671.6666666666665], [1067.0, 2044.5], [1087.0, 2700.0], [1057.0, 3485.0], [1059.0, 3451.0], [1061.0, 3074.0], [1063.0, 3053.0], [1085.0, 2798.5], [1081.0, 2816.0], [1079.0, 2822.0], [1077.0, 2829.0], [1075.0, 2904.0], [1093.0, 2103.0], [1147.0, 1726.0], [1117.0, 1596.8], [1115.0, 1106.0], [1109.0, 1124.5], [1111.0, 1582.5833333333335], [1113.0, 1484.0], [1119.0, 1129.0], [1089.0, 2696.0], [1091.0, 2571.0], [1099.0, 1778.0], [1145.0, 1727.0], [1149.0, 1695.0], [1129.0, 1137.5384615384614], [1131.0, 1725.0], [1133.0, 1719.6666666666667], [1127.0, 1163.5], [1125.0, 1168.0], [1123.0, 1715.1666666666667], [1181.0, 1381.3333333333333], [1175.0, 1167.0], [1169.0, 1389.0], [1177.0, 1381.0], [1165.0, 1647.0], [1163.0, 1639.0], [1161.0, 1655.0], [1159.0, 1633.4], [1205.0, 1304.8], [1215.0, 1251.0], [1195.0, 1290.3333333333335], [1189.0, 1293.1666666666665], [1199.0, 1298.0], [1213.0, 1256.0], [1211.0, 1256.0], [1219.0, 1222.0], [1217.0, 1218.0], [1.0, 71436.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[647.7259259259266, 9245.740740740732]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1220.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6.05, "minX": 1.55426556E12, "maxY": 5198.7, "series": [{"data": [[1.55426562E12, 3133.25], [1.55426568E12, 13.95], [1.55426556E12, 5198.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.55426562E12, 961.95], [1.55426568E12, 6.05], [1.55426556E12, 2254.633333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426568E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3829.6270125223564, "minX": 1.55426556E12, "maxY": 70929.0, "series": [{"data": [[1.55426562E12, 21009.5991983968], [1.55426568E12, 70929.0], [1.55426556E12, 3829.6270125223564]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426568E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3829.5983899821117, "minX": 1.55426556E12, "maxY": 70929.0, "series": [{"data": [[1.55426562E12, 20159.799599198395], [1.55426568E12, 70929.0], [1.55426556E12, 3829.5983899821117]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426568E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 431.85867620751367, "minX": 1.55426556E12, "maxY": 13057.333333333334, "series": [{"data": [[1.55426562E12, 4044.070140280563], [1.55426568E12, 13057.333333333334], [1.55426556E12, 431.85867620751367]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426568E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 284.0, "minX": 1.55426556E12, "maxY": 71436.0, "series": [{"data": [[1.55426562E12, 69920.0], [1.55426568E12, 71436.0], [1.55426556E12, 10294.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.55426562E12, 10376.0], [1.55426568E12, 70423.0], [1.55426556E12, 284.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.55426562E12, 49685.2], [1.55426568E12, 71436.0], [1.55426556E12, 7857.300000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.55426562E12, 69278.22], [1.55426568E12, 71436.0], [1.55426556E12, 10174.34]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.55426562E12, 61470.29999999999], [1.55426568E12, 71436.0], [1.55426556E12, 8530.349999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426568E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 570.0, "minX": 1.0, "maxY": 69278.0, "series": [{"data": [[33.0, 5004.0], [2.0, 44331.0], [36.0, 12300.5], [37.0, 11883.0], [157.0, 7035.0], [40.0, 6950.0], [10.0, 22402.0], [11.0, 20107.0], [187.0, 1305.0], [48.0, 10878.5], [3.0, 65609.0], [59.0, 13764.0], [16.0, 2810.0], [66.0, 6038.5], [1.0, 67774.0], [4.0, 65985.0], [5.0, 69278.0], [340.0, 570.0], [88.0, 3540.5], [22.0, 14659.0], [26.0, 19836.5], [115.0, 7723.0], [118.0, 12401.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 18925.0], [1.0, 21501.0], [5.0, 20469.0], [26.0, 19334.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 340.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 69278.0, "series": [{"data": [[33.0, 5004.0], [2.0, 44331.0], [36.0, 12300.5], [37.0, 11883.0], [157.0, 7035.0], [40.0, 6950.0], [10.0, 22401.5], [11.0, 20107.0], [187.0, 1305.0], [48.0, 10878.5], [3.0, 65608.0], [59.0, 13764.0], [16.0, 2810.0], [66.0, 6038.5], [1.0, 67774.0], [4.0, 65985.0], [5.0, 69278.0], [340.0, 570.0], [88.0, 3540.5], [22.0, 14659.0], [26.0, 19836.5], [115.0, 7723.0], [118.0, 12401.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 0.0], [1.0, 0.0], [5.0, 0.0], [26.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 340.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.55426556E12, "maxY": 27.0, "series": [{"data": [[1.55426556E12, 27.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426556E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.55426556E12, "maxY": 18.633333333333333, "series": [{"data": [[1.55426562E12, 7.95], [1.55426568E12, 0.05], [1.55426556E12, 18.633333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.55426562E12, 0.36666666666666664]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426568E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.55426556E12, "maxY": 18.633333333333333, "series": [{"data": [[1.55426562E12, 7.95], [1.55426568E12, 0.05], [1.55426556E12, 18.633333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.55426562E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426568E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.55426556E12, "maxY": 18.633333333333333, "series": [{"data": [[1.55426562E12, 7.95], [1.55426568E12, 0.05], [1.55426556E12, 18.633333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.55426562E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.55426568E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

