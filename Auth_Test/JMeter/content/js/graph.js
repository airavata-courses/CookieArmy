/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 467.0, "minX": 0.0, "maxY": 65885.0, "series": [{"data": [[0.0, 467.0], [0.1, 468.0], [0.2, 473.0], [0.3, 495.0], [0.4, 497.0], [0.5, 498.0], [0.6, 498.0], [0.7, 515.0], [0.8, 515.0], [0.9, 516.0], [1.0, 517.0], [1.1, 517.0], [1.2, 518.0], [1.3, 518.0], [1.4, 521.0], [1.5, 530.0], [1.6, 537.0], [1.7, 542.0], [1.8, 543.0], [1.9, 564.0], [2.0, 565.0], [2.1, 565.0], [2.2, 566.0], [2.3, 566.0], [2.4, 567.0], [2.5, 567.0], [2.6, 567.0], [2.7, 570.0], [2.8, 573.0], [2.9, 573.0], [3.0, 580.0], [3.1, 581.0], [3.2, 581.0], [3.3, 582.0], [3.4, 583.0], [3.5, 584.0], [3.6, 585.0], [3.7, 585.0], [3.8, 585.0], [3.9, 586.0], [4.0, 587.0], [4.1, 588.0], [4.2, 588.0], [4.3, 589.0], [4.4, 589.0], [4.5, 589.0], [4.6, 589.0], [4.7, 590.0], [4.8, 590.0], [4.9, 590.0], [5.0, 592.0], [5.1, 594.0], [5.2, 596.0], [5.3, 626.0], [5.4, 667.0], [5.5, 677.0], [5.6, 678.0], [5.7, 680.0], [5.8, 681.0], [5.9, 684.0], [6.0, 689.0], [6.1, 689.0], [6.2, 695.0], [6.3, 695.0], [6.4, 696.0], [6.5, 696.0], [6.6, 696.0], [6.7, 697.0], [6.8, 698.0], [6.9, 703.0], [7.0, 704.0], [7.1, 704.0], [7.2, 704.0], [7.3, 704.0], [7.4, 705.0], [7.5, 705.0], [7.6, 706.0], [7.7, 706.0], [7.8, 706.0], [7.9, 707.0], [8.0, 707.0], [8.1, 707.0], [8.2, 708.0], [8.3, 708.0], [8.4, 709.0], [8.5, 709.0], [8.6, 710.0], [8.7, 715.0], [8.8, 719.0], [8.9, 720.0], [9.0, 720.0], [9.1, 720.0], [9.2, 720.0], [9.3, 721.0], [9.4, 723.0], [9.5, 723.0], [9.6, 728.0], [9.7, 730.0], [9.8, 730.0], [9.9, 730.0], [10.0, 732.0], [10.1, 734.0], [10.2, 736.0], [10.3, 737.0], [10.4, 738.0], [10.5, 741.0], [10.6, 741.0], [10.7, 741.0], [10.8, 741.0], [10.9, 741.0], [11.0, 742.0], [11.1, 743.0], [11.2, 744.0], [11.3, 745.0], [11.4, 748.0], [11.5, 749.0], [11.6, 750.0], [11.7, 755.0], [11.8, 756.0], [11.9, 760.0], [12.0, 760.0], [12.1, 765.0], [12.2, 768.0], [12.3, 769.0], [12.4, 769.0], [12.5, 769.0], [12.6, 770.0], [12.7, 773.0], [12.8, 779.0], [12.9, 780.0], [13.0, 781.0], [13.1, 782.0], [13.2, 785.0], [13.3, 788.0], [13.4, 797.0], [13.5, 797.0], [13.6, 802.0], [13.7, 805.0], [13.8, 805.0], [13.9, 806.0], [14.0, 807.0], [14.1, 807.0], [14.2, 808.0], [14.3, 808.0], [14.4, 811.0], [14.5, 812.0], [14.6, 823.0], [14.7, 823.0], [14.8, 846.0], [14.9, 864.0], [15.0, 907.0], [15.1, 908.0], [15.2, 908.0], [15.3, 911.0], [15.4, 913.0], [15.5, 982.0], [15.6, 984.0], [15.7, 986.0], [15.8, 988.0], [15.9, 996.0], [16.0, 1009.0], [16.1, 1009.0], [16.2, 1009.0], [16.3, 1010.0], [16.4, 1010.0], [16.5, 1011.0], [16.6, 1011.0], [16.7, 1011.0], [16.8, 1011.0], [16.9, 1011.0], [17.0, 1013.0], [17.1, 1013.0], [17.2, 1015.0], [17.3, 1016.0], [17.4, 1019.0], [17.5, 1019.0], [17.6, 1020.0], [17.7, 1021.0], [17.8, 1021.0], [17.9, 1021.0], [18.0, 1021.0], [18.1, 1021.0], [18.2, 1022.0], [18.3, 1022.0], [18.4, 1028.0], [18.5, 1150.0], [18.6, 1156.0], [18.7, 1177.0], [18.8, 1184.0], [18.9, 1185.0], [19.0, 1186.0], [19.1, 1187.0], [19.2, 1187.0], [19.3, 1187.0], [19.4, 1188.0], [19.5, 1188.0], [19.6, 1188.0], [19.7, 1192.0], [19.8, 1192.0], [19.9, 1193.0], [20.0, 1195.0], [20.1, 1196.0], [20.2, 1197.0], [20.3, 1197.0], [20.4, 1197.0], [20.5, 1197.0], [20.6, 1198.0], [20.7, 1199.0], [20.8, 1200.0], [20.9, 1201.0], [21.0, 1201.0], [21.1, 1202.0], [21.2, 1203.0], [21.3, 1205.0], [21.4, 1211.0], [21.5, 1214.0], [21.6, 1214.0], [21.7, 1217.0], [21.8, 1217.0], [21.9, 1220.0], [22.0, 1224.0], [22.1, 1227.0], [22.2, 1227.0], [22.3, 1227.0], [22.4, 1228.0], [22.5, 1230.0], [22.6, 1230.0], [22.7, 1231.0], [22.8, 1232.0], [22.9, 1233.0], [23.0, 1235.0], [23.1, 1235.0], [23.2, 1236.0], [23.3, 1237.0], [23.4, 1238.0], [23.5, 1238.0], [23.6, 1238.0], [23.7, 1239.0], [23.8, 1240.0], [23.9, 1240.0], [24.0, 1240.0], [24.1, 1241.0], [24.2, 1242.0], [24.3, 1242.0], [24.4, 1243.0], [24.5, 1244.0], [24.6, 1244.0], [24.7, 1247.0], [24.8, 1247.0], [24.9, 1248.0], [25.0, 1248.0], [25.1, 1248.0], [25.2, 1249.0], [25.3, 1249.0], [25.4, 1250.0], [25.5, 1251.0], [25.6, 1252.0], [25.7, 1253.0], [25.8, 1254.0], [25.9, 1254.0], [26.0, 1257.0], [26.1, 1257.0], [26.2, 1258.0], [26.3, 1258.0], [26.4, 1261.0], [26.5, 1262.0], [26.6, 1262.0], [26.7, 1263.0], [26.8, 1263.0], [26.9, 1264.0], [27.0, 1266.0], [27.1, 1268.0], [27.2, 1269.0], [27.3, 1273.0], [27.4, 1284.0], [27.5, 1286.0], [27.6, 1288.0], [27.7, 1295.0], [27.8, 1295.0], [27.9, 1300.0], [28.0, 1315.0], [28.1, 1320.0], [28.2, 1326.0], [28.3, 1327.0], [28.4, 1339.0], [28.5, 1340.0], [28.6, 1342.0], [28.7, 1352.0], [28.8, 1355.0], [28.9, 1358.0], [29.0, 1362.0], [29.1, 1366.0], [29.2, 1372.0], [29.3, 1375.0], [29.4, 1400.0], [29.5, 1402.0], [29.6, 1403.0], [29.7, 1410.0], [29.8, 1415.0], [29.9, 1415.0], [30.0, 1416.0], [30.1, 1417.0], [30.2, 1418.0], [30.3, 1418.0], [30.4, 1422.0], [30.5, 1422.0], [30.6, 1422.0], [30.7, 1423.0], [30.8, 1424.0], [30.9, 1425.0], [31.0, 1430.0], [31.1, 1431.0], [31.2, 1432.0], [31.3, 1471.0], [31.4, 1478.0], [31.5, 1497.0], [31.6, 1501.0], [31.7, 1504.0], [31.8, 1504.0], [31.9, 1504.0], [32.0, 1505.0], [32.1, 1506.0], [32.2, 1507.0], [32.3, 1507.0], [32.4, 1509.0], [32.5, 1509.0], [32.6, 1511.0], [32.7, 1513.0], [32.8, 1515.0], [32.9, 1516.0], [33.0, 1520.0], [33.1, 1520.0], [33.2, 1521.0], [33.3, 1522.0], [33.4, 1525.0], [33.5, 1531.0], [33.6, 1541.0], [33.7, 1549.0], [33.8, 1550.0], [33.9, 1552.0], [34.0, 1553.0], [34.1, 1556.0], [34.2, 1556.0], [34.3, 1557.0], [34.4, 1558.0], [34.5, 1559.0], [34.6, 1559.0], [34.7, 1560.0], [34.8, 1562.0], [34.9, 1562.0], [35.0, 1563.0], [35.1, 1563.0], [35.2, 1565.0], [35.3, 1567.0], [35.4, 1572.0], [35.5, 1573.0], [35.6, 1574.0], [35.7, 1576.0], [35.8, 1577.0], [35.9, 1579.0], [36.0, 1585.0], [36.1, 1625.0], [36.2, 1628.0], [36.3, 1628.0], [36.4, 1633.0], [36.5, 1633.0], [36.6, 1635.0], [36.7, 1644.0], [36.8, 1645.0], [36.9, 1648.0], [37.0, 1651.0], [37.1, 1652.0], [37.2, 1653.0], [37.3, 1657.0], [37.4, 1670.0], [37.5, 1671.0], [37.6, 1678.0], [37.7, 1690.0], [37.8, 1691.0], [37.9, 1694.0], [38.0, 1699.0], [38.1, 1706.0], [38.2, 1707.0], [38.3, 1711.0], [38.4, 1711.0], [38.5, 1718.0], [38.6, 1718.0], [38.7, 1722.0], [38.8, 1736.0], [38.9, 1737.0], [39.0, 1741.0], [39.1, 1747.0], [39.2, 1753.0], [39.3, 1754.0], [39.4, 1756.0], [39.5, 1760.0], [39.6, 1762.0], [39.7, 1767.0], [39.8, 1767.0], [39.9, 1767.0], [40.0, 1768.0], [40.1, 1772.0], [40.2, 1773.0], [40.3, 1773.0], [40.4, 1774.0], [40.5, 1774.0], [40.6, 1775.0], [40.7, 1776.0], [40.8, 1776.0], [40.9, 1776.0], [41.0, 1778.0], [41.1, 1778.0], [41.2, 1779.0], [41.3, 1781.0], [41.4, 1785.0], [41.5, 1787.0], [41.6, 1787.0], [41.7, 1792.0], [41.8, 1796.0], [41.9, 1796.0], [42.0, 1798.0], [42.1, 1801.0], [42.2, 1802.0], [42.3, 1803.0], [42.4, 1804.0], [42.5, 1807.0], [42.6, 1807.0], [42.7, 1810.0], [42.8, 1811.0], [42.9, 1811.0], [43.0, 1826.0], [43.1, 1927.0], [43.2, 1927.0], [43.3, 1929.0], [43.4, 1931.0], [43.5, 1933.0], [43.6, 1937.0], [43.7, 1939.0], [43.8, 1939.0], [43.9, 1940.0], [44.0, 1940.0], [44.1, 1942.0], [44.2, 1944.0], [44.3, 1946.0], [44.4, 1948.0], [44.5, 1948.0], [44.6, 1949.0], [44.7, 1950.0], [44.8, 1951.0], [44.9, 1952.0], [45.0, 1952.0], [45.1, 1956.0], [45.2, 1959.0], [45.3, 1960.0], [45.4, 1964.0], [45.5, 1968.0], [45.6, 1969.0], [45.7, 1969.0], [45.8, 1971.0], [45.9, 1971.0], [46.0, 1971.0], [46.1, 1972.0], [46.2, 1972.0], [46.3, 1973.0], [46.4, 1976.0], [46.5, 1977.0], [46.6, 1979.0], [46.7, 1979.0], [46.8, 1979.0], [46.9, 1979.0], [47.0, 1980.0], [47.1, 1981.0], [47.2, 1981.0], [47.3, 1982.0], [47.4, 1985.0], [47.5, 1986.0], [47.6, 1988.0], [47.7, 1991.0], [47.8, 1999.0], [47.9, 1999.0], [48.0, 2002.0], [48.1, 2004.0], [48.2, 2005.0], [48.3, 2006.0], [48.4, 2007.0], [48.5, 2007.0], [48.6, 2007.0], [48.7, 2009.0], [48.8, 2009.0], [48.9, 2009.0], [49.0, 2009.0], [49.1, 2010.0], [49.2, 2010.0], [49.3, 2010.0], [49.4, 2011.0], [49.5, 2011.0], [49.6, 2012.0], [49.7, 2012.0], [49.8, 2013.0], [49.9, 2013.0], [50.0, 2013.0], [50.1, 2016.0], [50.2, 2016.0], [50.3, 2016.0], [50.4, 2017.0], [50.5, 2019.0], [50.6, 2020.0], [50.7, 2021.0], [50.8, 2021.0], [50.9, 2025.0], [51.0, 2029.0], [51.1, 2033.0], [51.2, 2035.0], [51.3, 2036.0], [51.4, 2045.0], [51.5, 2050.0], [51.6, 2052.0], [51.7, 2065.0], [51.8, 2065.0], [51.9, 2066.0], [52.0, 2067.0], [52.1, 2071.0], [52.2, 2071.0], [52.3, 2073.0], [52.4, 2074.0], [52.5, 2076.0], [52.6, 2076.0], [52.7, 2077.0], [52.8, 2077.0], [52.9, 2077.0], [53.0, 2078.0], [53.1, 2079.0], [53.2, 2081.0], [53.3, 2081.0], [53.4, 2081.0], [53.5, 2082.0], [53.6, 2083.0], [53.7, 2083.0], [53.8, 2084.0], [53.9, 2085.0], [54.0, 2086.0], [54.1, 2087.0], [54.2, 2087.0], [54.3, 2089.0], [54.4, 2091.0], [54.5, 2093.0], [54.6, 2094.0], [54.7, 2111.0], [54.8, 2114.0], [54.9, 2114.0], [55.0, 2115.0], [55.1, 2116.0], [55.2, 2118.0], [55.3, 2119.0], [55.4, 2123.0], [55.5, 2123.0], [55.6, 2125.0], [55.7, 2127.0], [55.8, 2128.0], [55.9, 2130.0], [56.0, 2130.0], [56.1, 2130.0], [56.2, 2131.0], [56.3, 2132.0], [56.4, 2135.0], [56.5, 2136.0], [56.6, 2136.0], [56.7, 2140.0], [56.8, 2140.0], [56.9, 2140.0], [57.0, 2141.0], [57.1, 2142.0], [57.2, 2145.0], [57.3, 2146.0], [57.4, 2149.0], [57.5, 2149.0], [57.6, 2150.0], [57.7, 2152.0], [57.8, 2153.0], [57.9, 2154.0], [58.0, 2155.0], [58.1, 2162.0], [58.2, 2163.0], [58.3, 2163.0], [58.4, 2164.0], [58.5, 2164.0], [58.6, 2165.0], [58.7, 2166.0], [58.8, 2166.0], [58.9, 2167.0], [59.0, 2168.0], [59.1, 2169.0], [59.2, 2169.0], [59.3, 2169.0], [59.4, 2170.0], [59.5, 2171.0], [59.6, 2171.0], [59.7, 2172.0], [59.8, 2173.0], [59.9, 2174.0], [60.0, 2174.0], [60.1, 2174.0], [60.2, 2179.0], [60.3, 2180.0], [60.4, 2186.0], [60.5, 2194.0], [60.6, 2195.0], [60.7, 2199.0], [60.8, 2199.0], [60.9, 2200.0], [61.0, 2201.0], [61.1, 2203.0], [61.2, 2204.0], [61.3, 2205.0], [61.4, 2206.0], [61.5, 2207.0], [61.6, 2207.0], [61.7, 2207.0], [61.8, 2208.0], [61.9, 2208.0], [62.0, 2209.0], [62.1, 2209.0], [62.2, 2209.0], [62.3, 2210.0], [62.4, 2210.0], [62.5, 2211.0], [62.6, 2211.0], [62.7, 2212.0], [62.8, 2212.0], [62.9, 2212.0], [63.0, 2213.0], [63.1, 2214.0], [63.2, 2214.0], [63.3, 2214.0], [63.4, 2215.0], [63.5, 2215.0], [63.6, 2216.0], [63.7, 2217.0], [63.8, 2217.0], [63.9, 2217.0], [64.0, 2218.0], [64.1, 2219.0], [64.2, 2219.0], [64.3, 2220.0], [64.4, 2221.0], [64.5, 2221.0], [64.6, 2222.0], [64.7, 2223.0], [64.8, 2223.0], [64.9, 2223.0], [65.0, 2223.0], [65.1, 2224.0], [65.2, 2225.0], [65.3, 2225.0], [65.4, 2227.0], [65.5, 2230.0], [65.6, 2230.0], [65.7, 2232.0], [65.8, 2233.0], [65.9, 2233.0], [66.0, 2236.0], [66.1, 2237.0], [66.2, 2237.0], [66.3, 2237.0], [66.4, 2238.0], [66.5, 2239.0], [66.6, 2239.0], [66.7, 2243.0], [66.8, 2243.0], [66.9, 2244.0], [67.0, 2245.0], [67.1, 2246.0], [67.2, 2249.0], [67.3, 2250.0], [67.4, 2254.0], [67.5, 2258.0], [67.6, 2259.0], [67.7, 2264.0], [67.8, 2270.0], [67.9, 2271.0], [68.0, 2276.0], [68.1, 2281.0], [68.2, 2282.0], [68.3, 2284.0], [68.4, 2287.0], [68.5, 2287.0], [68.6, 2287.0], [68.7, 2290.0], [68.8, 2295.0], [68.9, 2298.0], [69.0, 2299.0], [69.1, 2302.0], [69.2, 2303.0], [69.3, 2303.0], [69.4, 2306.0], [69.5, 2308.0], [69.6, 2308.0], [69.7, 2310.0], [69.8, 2310.0], [69.9, 2314.0], [70.0, 2314.0], [70.1, 2317.0], [70.2, 2317.0], [70.3, 2318.0], [70.4, 2322.0], [70.5, 2323.0], [70.6, 2324.0], [70.7, 2325.0], [70.8, 2327.0], [70.9, 2327.0], [71.0, 2329.0], [71.1, 2338.0], [71.2, 2339.0], [71.3, 2340.0], [71.4, 2356.0], [71.5, 2357.0], [71.6, 2361.0], [71.7, 2366.0], [71.8, 2367.0], [71.9, 2368.0], [72.0, 2368.0], [72.1, 2370.0], [72.2, 2371.0], [72.3, 2374.0], [72.4, 2376.0], [72.5, 2377.0], [72.6, 2381.0], [72.7, 2382.0], [72.8, 2384.0], [72.9, 2384.0], [73.0, 2384.0], [73.1, 2385.0], [73.2, 2386.0], [73.3, 2386.0], [73.4, 2387.0], [73.5, 2387.0], [73.6, 2388.0], [73.7, 2390.0], [73.8, 2390.0], [73.9, 2391.0], [74.0, 2391.0], [74.1, 2392.0], [74.2, 2393.0], [74.3, 2394.0], [74.4, 2395.0], [74.5, 2395.0], [74.6, 2395.0], [74.7, 2397.0], [74.8, 2398.0], [74.9, 2398.0], [75.0, 2402.0], [75.1, 2405.0], [75.2, 2405.0], [75.3, 2405.0], [75.4, 2412.0], [75.5, 2426.0], [75.6, 2426.0], [75.7, 2430.0], [75.8, 2433.0], [75.9, 2434.0], [76.0, 2435.0], [76.1, 2437.0], [76.2, 2437.0], [76.3, 2438.0], [76.4, 2438.0], [76.5, 2439.0], [76.6, 2440.0], [76.7, 2442.0], [76.8, 2443.0], [76.9, 2443.0], [77.0, 2444.0], [77.1, 2444.0], [77.2, 2445.0], [77.3, 2445.0], [77.4, 2447.0], [77.5, 2447.0], [77.6, 2447.0], [77.7, 2448.0], [77.8, 2448.0], [77.9, 2448.0], [78.0, 2450.0], [78.1, 2453.0], [78.2, 2456.0], [78.3, 2457.0], [78.4, 2459.0], [78.5, 2462.0], [78.6, 2462.0], [78.7, 2470.0], [78.8, 2471.0], [78.9, 2471.0], [79.0, 2477.0], [79.1, 2481.0], [79.2, 2482.0], [79.3, 2483.0], [79.4, 2493.0], [79.5, 2495.0], [79.6, 2498.0], [79.7, 2499.0], [79.8, 2501.0], [79.9, 2502.0], [80.0, 2503.0], [80.1, 2505.0], [80.2, 2505.0], [80.3, 2506.0], [80.4, 2509.0], [80.5, 2509.0], [80.6, 2510.0], [80.7, 2510.0], [80.8, 2513.0], [80.9, 2513.0], [81.0, 2513.0], [81.1, 2515.0], [81.2, 2515.0], [81.3, 2517.0], [81.4, 2521.0], [81.5, 2523.0], [81.6, 2523.0], [81.7, 2527.0], [81.8, 2529.0], [81.9, 2529.0], [82.0, 2530.0], [82.1, 2530.0], [82.2, 2532.0], [82.3, 2533.0], [82.4, 2535.0], [82.5, 2537.0], [82.6, 2538.0], [82.7, 2543.0], [82.8, 2550.0], [82.9, 2553.0], [83.0, 2553.0], [83.1, 2557.0], [83.2, 2558.0], [83.3, 2558.0], [83.4, 2572.0], [83.5, 2573.0], [83.6, 2575.0], [83.7, 2622.0], [83.8, 2622.0], [83.9, 2660.0], [84.0, 2660.0], [84.1, 2756.0], [84.2, 2762.0], [84.3, 2763.0], [84.4, 2765.0], [84.5, 2765.0], [84.6, 2768.0], [84.7, 2781.0], [84.8, 2781.0], [84.9, 2784.0], [85.0, 2784.0], [85.1, 2788.0], [85.2, 2788.0], [85.3, 2790.0], [85.4, 2791.0], [85.5, 2791.0], [85.6, 2792.0], [85.7, 2809.0], [85.8, 2843.0], [85.9, 2868.0], [86.0, 2879.0], [86.1, 2888.0], [86.2, 2888.0], [86.3, 2895.0], [86.4, 2952.0], [86.5, 3836.0], [86.6, 3842.0], [86.7, 3846.0], [86.8, 3847.0], [86.9, 3848.0], [87.0, 3848.0], [87.1, 3850.0], [87.2, 3850.0], [87.3, 3852.0], [87.4, 3853.0], [87.5, 3853.0], [87.6, 3853.0], [87.7, 3855.0], [87.8, 3855.0], [87.9, 3855.0], [88.0, 3855.0], [88.1, 3863.0], [88.2, 3871.0], [88.3, 3873.0], [88.4, 3880.0], [88.5, 3881.0], [88.6, 3884.0], [88.7, 3885.0], [88.8, 3887.0], [88.9, 3888.0], [89.0, 3889.0], [89.1, 3892.0], [89.2, 3893.0], [89.3, 3895.0], [89.4, 3897.0], [89.5, 3898.0], [89.6, 3901.0], [89.7, 3905.0], [89.8, 3905.0], [89.9, 3907.0], [90.0, 3908.0], [90.1, 3917.0], [90.2, 4894.0], [90.3, 6289.0], [90.4, 6892.0], [90.5, 7405.0], [90.6, 7897.0], [90.7, 9073.0], [90.8, 9410.0], [90.9, 9899.0], [91.0, 10399.0], [91.1, 11401.0], [91.2, 11889.0], [91.3, 12377.0], [91.4, 13380.0], [91.5, 13893.0], [91.6, 14378.0], [91.7, 15380.0], [91.8, 15883.0], [91.9, 16391.0], [92.0, 16894.0], [92.1, 17892.0], [92.2, 18388.0], [92.3, 18916.0], [92.4, 19889.0], [92.5, 20401.0], [92.6, 20885.0], [92.7, 21870.0], [92.8, 22369.0], [92.9, 22886.0], [93.0, 23397.0], [93.1, 24387.0], [93.2, 24872.0], [93.3, 25366.0], [93.4, 26387.0], [93.5, 26876.0], [93.6, 27406.0], [93.7, 28377.0], [93.8, 28868.0], [93.9, 30544.0], [94.0, 30858.0], [94.1, 31369.0], [94.2, 31794.0], [94.3, 31882.0], [94.4, 32859.0], [94.5, 33374.0], [94.6, 33895.0], [94.7, 34888.0], [94.8, 35372.0], [94.9, 35868.0], [95.0, 36396.0], [95.1, 37412.0], [95.2, 37877.0], [95.3, 38397.0], [95.4, 39868.0], [95.5, 40355.0], [95.6, 40825.0], [95.7, 41864.0], [95.8, 42363.0], [95.9, 42873.0], [96.0, 43341.0], [96.1, 44782.0], [96.2, 45245.0], [96.3, 45323.0], [96.4, 46195.0], [96.5, 46687.0], [96.6, 47202.0], [96.7, 48207.0], [96.8, 48705.0], [96.9, 49217.0], [97.0, 49703.0], [97.1, 50695.0], [97.2, 51197.0], [97.3, 51865.0], [97.4, 52697.0], [97.5, 53238.0], [97.6, 53715.0], [97.7, 54751.0], [97.8, 55236.0], [97.9, 55691.0], [98.0, 56926.0], [98.1, 57711.0], [98.2, 58209.0], [98.3, 58695.0], [98.4, 59048.0], [98.5, 59234.0], [98.6, 59237.0], [98.7, 59881.0], [98.8, 60247.0], [98.9, 60698.0], [99.0, 61213.0], [99.1, 61767.0], [99.2, 61918.0], [99.3, 61950.0], [99.4, 63069.0], [99.5, 63551.0], [99.6, 64066.0], [99.7, 64969.0], [99.8, 65075.0], [99.9, 65445.0], [100.0, 65885.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 106.0, "series": [{"data": [[33300.0, 1.0], [34300.0, 1.0], [35300.0, 1.0], [36300.0, 1.0], [38300.0, 1.0], [39500.0, 1.0], [40300.0, 1.0], [42300.0, 1.0], [43300.0, 1.0], [44700.0, 1.0], [45300.0, 1.0], [46100.0, 1.0], [48700.0, 1.0], [49700.0, 1.0], [51100.0, 1.0], [53700.0, 1.0], [54700.0, 1.0], [56900.0, 1.0], [57700.0, 1.0], [59700.0, 1.0], [61700.0, 1.0], [61900.0, 2.0], [63500.0, 1.0], [64900.0, 1.0], [65800.0, 1.0], [400.0, 8.0], [500.0, 60.0], [600.0, 21.0], [700.0, 87.0], [800.0, 18.0], [900.0, 13.0], [1000.0, 33.0], [1100.0, 30.0], [1200.0, 92.0], [1300.0, 20.0], [1400.0, 28.0], [1500.0, 59.0], [1600.0, 26.0], [1700.0, 51.0], [1800.0, 13.0], [1900.0, 64.0], [2000.0, 87.0], [2100.0, 81.0], [2300.0, 77.0], [2200.0, 106.0], [2400.0, 63.0], [2500.0, 51.0], [2600.0, 4.0], [2800.0, 8.0], [2700.0, 22.0], [2900.0, 2.0], [3800.0, 40.0], [3900.0, 8.0], [4800.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6800.0, 1.0], [7400.0, 1.0], [7800.0, 1.0], [8300.0, 1.0], [9000.0, 1.0], [9400.0, 1.0], [9800.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11400.0, 1.0], [11800.0, 1.0], [12300.0, 1.0], [12800.0, 1.0], [13300.0, 1.0], [13800.0, 1.0], [14300.0, 1.0], [14800.0, 1.0], [15300.0, 1.0], [15800.0, 1.0], [16300.0, 1.0], [16800.0, 1.0], [17300.0, 1.0], [17800.0, 1.0], [18300.0, 1.0], [18900.0, 1.0], [19400.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [20800.0, 1.0], [21300.0, 1.0], [21800.0, 1.0], [22300.0, 1.0], [22800.0, 1.0], [23300.0, 1.0], [23800.0, 1.0], [24300.0, 1.0], [24800.0, 1.0], [25300.0, 1.0], [25800.0, 1.0], [26300.0, 1.0], [26800.0, 1.0], [27400.0, 1.0], [27800.0, 1.0], [28300.0, 1.0], [28800.0, 1.0], [30500.0, 1.0], [30800.0, 1.0], [31300.0, 2.0], [31700.0, 1.0], [31800.0, 1.0], [32400.0, 1.0], [32800.0, 1.0], [33800.0, 1.0], [34800.0, 1.0], [35800.0, 1.0], [36800.0, 1.0], [37400.0, 1.0], [37800.0, 1.0], [39800.0, 1.0], [40800.0, 2.0], [41800.0, 1.0], [42800.0, 1.0], [44400.0, 1.0], [45200.0, 1.0], [45600.0, 1.0], [46600.0, 1.0], [47200.0, 1.0], [47600.0, 1.0], [48200.0, 1.0], [49200.0, 1.0], [50200.0, 1.0], [50600.0, 1.0], [51800.0, 1.0], [52200.0, 1.0], [52600.0, 1.0], [53200.0, 1.0], [54200.0, 1.0], [55200.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [58200.0, 1.0], [58600.0, 1.0], [58800.0, 1.0], [59000.0, 1.0], [59200.0, 2.0], [59800.0, 1.0], [60200.0, 1.0], [60600.0, 1.0], [61200.0, 1.0], [61600.0, 1.0], [62600.0, 1.0], [63000.0, 1.0], [64000.0, 1.0], [64400.0, 1.0], [65000.0, 1.0], [65400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 65800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 890.0, "series": [{"data": [[0.0, 8.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 402.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 890.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 33.53030303030303, "minX": 1.55426664E12, "maxY": 608.3395461912478, "series": [{"data": [[1.5542667E12, 33.53030303030303], [1.55426664E12, 608.3395461912478]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5542667E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 531.25, "minX": 1.0, "maxY": 65885.0, "series": [{"data": [[2.0, 65445.0], [4.0, 65022.0], [5.0, 64453.0], [6.0, 64066.0], [7.0, 63551.0], [8.0, 63069.0], [9.0, 62688.0], [10.0, 61918.0], [11.0, 61950.0], [12.0, 61767.0], [13.0, 61696.0], [14.0, 61213.0], [15.0, 60698.0], [16.0, 60247.0], [17.0, 59881.0], [18.0, 59707.0], [20.0, 59235.5], [21.0, 59048.0], [22.0, 58892.0], [23.0, 58695.0], [24.0, 58209.0], [25.0, 57711.0], [26.0, 57261.0], [27.0, 56926.0], [28.0, 55691.0], [29.0, 55236.0], [30.0, 54751.0], [31.0, 54246.0], [33.0, 53238.0], [32.0, 53715.0], [35.0, 52206.0], [34.0, 52697.0], [37.0, 51197.0], [36.0, 51865.0], [39.0, 50261.0], [38.0, 50695.0], [41.0, 49217.0], [40.0, 49703.0], [43.0, 48207.0], [42.0, 48705.0], [45.0, 47202.0], [44.0, 47694.0], [47.0, 46195.0], [46.0, 46687.0], [49.0, 45323.0], [48.0, 45689.0], [51.0, 44782.0], [50.0, 45245.0], [53.0, 43341.0], [52.0, 44491.0], [55.0, 42363.0], [54.0, 42873.0], [57.0, 40878.0], [56.0, 41864.0], [59.0, 40355.0], [58.0, 40825.0], [61.0, 39554.0], [60.0, 39868.0], [63.0, 37877.0], [62.0, 38397.0], [67.0, 35868.0], [66.0, 36396.0], [65.0, 36887.0], [64.0, 37412.0], [71.0, 33895.0], [70.0, 34394.0], [69.0, 34888.0], [68.0, 35372.0], [75.0, 31882.0], [74.0, 32413.0], [73.0, 32859.0], [72.0, 33374.0], [79.0, 30858.0], [78.0, 31343.0], [77.0, 31369.0], [76.0, 31794.0], [83.0, 27899.0], [82.0, 28377.0], [81.0, 28868.0], [80.0, 30544.0], [87.0, 25878.0], [86.0, 26387.0], [85.0, 26876.0], [84.0, 27406.0], [91.0, 23881.0], [90.0, 24387.0], [89.0, 24872.0], [88.0, 25366.0], [95.0, 21870.0], [94.0, 22369.0], [93.0, 22886.0], [92.0, 23397.0], [99.0, 19889.0], [98.0, 20401.0], [97.0, 20885.0], [96.0, 21385.0], [103.0, 17892.0], [102.0, 18388.0], [101.0, 18916.0], [100.0, 19458.0], [107.0, 15883.0], [106.0, 16391.0], [105.0, 16894.0], [104.0, 17389.0], [111.0, 13893.0], [110.0, 14378.0], [109.0, 14891.0], [108.0, 15380.0], [115.0, 11889.0], [114.0, 12377.0], [113.0, 12879.0], [112.0, 13380.0], [119.0, 9899.0], [118.0, 10399.0], [117.0, 10899.0], [116.0, 11401.0], [123.0, 7897.0], [122.0, 8389.0], [121.0, 9073.0], [120.0, 9410.0], [127.0, 6289.0], [126.0, 6399.0], [125.0, 6892.0], [124.0, 7405.0], [131.0, 3905.3333333333335], [128.0, 4894.0], [143.0, 3902.0], [141.0, 3901.0], [140.0, 3891.5], [138.0, 3900.5], [137.0, 3898.3333333333335], [136.0, 3891.0], [151.0, 3876.5], [150.0, 3884.0], [148.0, 3893.5], [144.0, 3876.0], [157.0, 3871.0], [156.0, 3852.6666666666665], [153.0, 3892.0], [152.0, 3895.0], [164.0, 3850.0], [163.0, 3836.0], [162.0, 3848.0], [161.0, 3853.75], [175.0, 3859.0], [174.0, 3855.0], [172.0, 3846.5], [170.0, 3850.6], [169.0, 3849.0], [182.0, 2545.5], [180.0, 2550.0], [179.0, 2573.0], [178.0, 2660.0], [176.0, 3852.5], [189.0, 2532.0], [187.0, 2533.4], [199.0, 2540.0], [196.0, 2527.0], [194.0, 2530.0], [207.0, 2508.6666666666665], [206.0, 2494.5], [205.0, 2499.0], [201.0, 2520.125], [213.0, 2504.3333333333335], [211.0, 2503.0], [210.0, 2504.0], [209.0, 2505.0], [223.0, 2510.0], [221.0, 2503.0], [218.0, 2515.0], [217.0, 2513.0], [216.0, 2520.3333333333335], [230.0, 2477.0], [229.0, 2474.25], [225.0, 2503.0], [238.0, 2448.0], [236.0, 2457.0], [235.0, 2462.0], [234.0, 2452.0], [244.0, 2445.6666666666665], [241.0, 2466.8571428571427], [255.0, 2441.6666666666665], [252.0, 2447.0], [251.0, 2451.3333333333335], [248.0, 2448.0], [265.0, 2437.0], [264.0, 2434.0], [263.0, 2434.6666666666665], [260.0, 2441.75], [256.0, 2448.0], [287.0, 2384.0], [286.0, 2388.25], [284.0, 2391.0], [282.0, 2395.0], [280.0, 2387.5], [276.0, 2435.1111111111113], [275.0, 2448.0], [273.0, 2952.0], [302.0, 2390.8], [300.0, 2390.0], [299.0, 2521.0], [297.0, 2392.25], [296.0, 2395.0], [318.0, 2725.0], [315.0, 2390.0], [314.0, 2397.25], [313.0, 2388.0], [309.0, 2388.6666666666665], [306.0, 2371.0], [305.0, 2408.0], [304.0, 2405.0], [335.0, 2365.714285714286], [334.0, 2363.0], [328.0, 2357.0], [327.0, 2366.0], [325.0, 2387.0], [324.0, 2621.0], [322.0, 2377.0], [321.0, 2883.3333333333335], [351.0, 2315.1666666666665], [349.0, 2314.0], [344.0, 2325.5], [342.0, 2339.0], [341.0, 2336.0], [339.0, 2340.0], [338.0, 2329.3333333333335], [366.0, 2299.0], [365.0, 2289.5], [364.0, 2293.0], [363.0, 2301.0], [357.0, 2311.5], [356.0, 2301.0], [353.0, 2302.0], [352.0, 2317.0], [382.0, 2790.0], [377.0, 2787.5], [376.0, 2782.5], [373.0, 2782.0], [370.0, 2312.0], [368.0, 2308.0], [387.0, 2477.0], [399.0, 2790.0], [398.0, 2275.5], [394.0, 2453.3333333333335], [392.0, 2324.0], [391.0, 2254.0], [390.0, 2276.0], [386.0, 2240.0], [384.0, 2237.0], [413.0, 2243.0], [412.0, 2230.0], [411.0, 2277.0], [410.0, 2602.6666666666665], [409.0, 2264.0], [408.0, 2238.0], [405.0, 2258.0], [404.0, 2322.0], [402.0, 2263.3333333333335], [401.0, 2246.0], [400.0, 2271.0], [430.0, 2366.75], [426.0, 2233.0], [425.0, 2554.0], [420.0, 2443.8], [419.0, 2225.0], [447.0, 2210.6666666666665], [444.0, 2209.571428571429], [443.0, 2217.0], [436.0, 2400.0], [459.0, 2212.0], [458.0, 2217.0], [457.0, 2216.0], [456.0, 2212.6666666666665], [455.0, 2220.5], [479.0, 2522.0], [477.0, 2203.0], [476.0, 2213.5], [474.0, 2205.0], [470.0, 2207.25], [466.0, 2218.0], [465.0, 2213.666666666667], [492.0, 2224.0], [488.0, 2198.0], [487.0, 2207.2], [486.0, 2195.0], [485.0, 2199.0], [484.0, 2199.0], [510.0, 2175.3333333333335], [507.0, 2171.5], [506.0, 2171.6666666666665], [504.0, 2168.0], [501.0, 2219.0], [499.0, 2232.0], [498.0, 2231.5], [496.0, 2234.6666666666665], [517.0, 2180.0], [539.0, 2158.0], [543.0, 2164.6666666666665], [536.0, 2338.166666666667], [533.0, 2553.0], [529.0, 2292.5], [527.0, 2171.0], [521.0, 2142.0], [520.0, 2153.0], [516.0, 2146.0], [515.0, 2152.6666666666665], [513.0, 2164.5], [561.0, 2224.5], [573.0, 2132.0], [574.0, 2126.0], [560.0, 2146.0], [571.0, 2118.5], [569.0, 2127.75], [568.0, 2597.0], [551.0, 2170.0], [550.0, 2162.5], [546.0, 2156.6666666666665], [557.0, 2168.0], [553.0, 2318.3333333333335], [552.0, 2171.0], [564.0, 2140.0], [563.0, 2140.0], [562.0, 2169.0], [601.0, 2077.0], [603.0, 2082.0], [607.0, 2076.75], [602.0, 2079.1428571428573], [594.0, 2087.0], [593.0, 2087.0], [589.0, 2100.0], [576.0, 2116.0], [580.0, 2130.0], [577.0, 2130.0], [588.0, 2337.25], [584.0, 2228.0], [633.0, 2020.0], [639.0, 2072.0], [637.0, 2086.0], [635.0, 2082.0], [632.0, 2044.0], [614.0, 2066.0], [609.0, 2072.0], [627.0, 2056.75], [623.0, 2093.5], [621.0, 2036.0], [620.0, 2036.0], [619.0, 2063.0], [617.0, 2051.6666666666665], [659.0, 2011.1666666666665], [669.0, 2027.5], [667.0, 2009.0], [666.0, 2011.0], [646.0, 2017.0], [645.0, 2009.75], [643.0, 2010.0], [640.0, 2381.0], [663.0, 2017.5], [662.0, 2009.0], [660.0, 2013.0], [656.0, 2014.0], [655.0, 2012.0], [651.0, 2016.0], [650.0, 2015.0], [649.0, 1999.0], [702.0, 585.0], [703.0, 564.2857142857143], [690.0, 1984.1666666666667], [699.0, 860.0], [701.0, 587.0], [698.0, 1278.5], [700.0, 1966.5], [696.0, 1950.0], [687.0, 1983.3333333333333], [675.0, 2008.6666666666667], [674.0, 2012.6666666666667], [685.0, 2000.0], [682.0, 1996.5], [680.0, 1980.0], [695.0, 1976.5], [693.0, 1981.6666666666667], [711.0, 1072.1176470588234], [706.0, 1044.0], [709.0, 536.7272727272727], [710.0, 531.25], [714.0, 581.0416666666667], [712.0, 591.0], [713.0, 1975.0], [707.0, 580.5], [717.0, 616.25], [716.0, 1601.5], [732.0, 738.0], [720.0, 733.5], [721.0, 1928.0], [733.0, 1948.0], [724.0, 742.0], [722.0, 744.0], [727.0, 679.0], [726.0, 1143.6666666666667], [731.0, 741.2], [730.0, 1545.3333333333333], [728.0, 1945.1666666666665], [705.0, 569.0], [704.0, 1687.6], [718.0, 1337.25], [719.0, 1952.0], [715.0, 628.6666666666666], [752.0, 1142.4], [754.0, 906.6999999999999], [755.0, 888.8571428571429], [756.0, 760.0], [759.0, 768.0], [758.0, 751.5], [757.0, 770.0], [751.0, 1523.25], [747.0, 1796.0], [738.0, 986.2222222222222], [737.0, 694.0], [753.0, 703.75], [746.0, 707.5], [745.0, 1020.6428571428572], [741.0, 1392.7777777777778], [763.0, 767.0], [762.0, 1767.0], [761.0, 1767.4], [766.0, 783.6666666666666], [767.0, 1766.6666666666667], [764.0, 1446.0], [760.0, 1278.0], [739.0, 1013.5], [768.0, 762.0], [780.0, 801.0], [779.0, 1461.6666666666665], [778.0, 797.0], [789.0, 1046.75], [791.0, 1770.0], [790.0, 1760.8], [786.0, 809.0], [785.0, 808.5], [784.0, 1787.0], [796.0, 823.0], [795.0, 1741.0], [794.0, 1747.0], [793.0, 1746.0], [792.0, 1718.0], [775.0, 1774.0], [774.0, 1781.5], [772.0, 1772.0], [771.0, 1777.0], [797.0, 1715.0], [783.0, 1151.6666666666667], [781.0, 808.0], [782.0, 1795.0], [830.0, 1625.0], [831.0, 1631.3333333333333], [827.0, 1628.0], [826.0, 1652.0], [825.0, 1690.0], [824.0, 1645.6], [815.0, 1658.5], [802.0, 1736.0], [801.0, 1719.0], [813.0, 1674.8], [808.0, 1704.6666666666667], [823.0, 1640.0], [818.0, 1646.0], [816.0, 1670.0], [850.0, 1557.0], [862.0, 1560.0], [863.0, 1567.0], [849.0, 1560.0], [848.0, 1570.6666666666667], [861.0, 1565.0], [859.0, 1552.5], [857.0, 1565.0], [839.0, 1572.2], [834.0, 1572.6666666666667], [847.0, 1555.3333333333333], [845.0, 1563.0], [844.0, 1562.0], [854.0, 1559.0], [853.0, 1550.0], [851.0, 1525.0], [894.0, 1489.8333333333333], [888.0, 1507.75], [865.0, 1549.5], [885.0, 1507.0], [884.0, 1522.0], [882.0, 1511.25], [881.0, 1512.0], [879.0, 1517.5], [878.0, 1516.0], [873.0, 1513.0], [872.0, 1511.4285714285716], [923.0, 1365.3333333333333], [902.0, 907.0], [903.0, 899.0], [900.0, 911.0], [898.0, 1432.0], [896.0, 1422.0], [901.0, 1409.0], [904.0, 1345.5714285714287], [907.0, 1416.5], [905.0, 1410.0], [911.0, 1422.0], [924.0, 1375.0], [917.0, 1422.8], [912.0, 1409.0], [920.0, 1355.0], [919.0, 1416.0], [918.0, 1415.0], [932.0, 1352.0], [957.0, 1217.0], [958.0, 1264.0], [952.0, 1216.5], [949.0, 1236.5], [946.0, 1206.6666666666667], [943.0, 1291.1666666666667], [940.0, 1295.0], [936.0, 1319.5], [931.0, 1343.3333333333333], [929.0, 1362.0], [985.0, 1239.0], [978.0, 1228.0], [989.0, 1241.0], [988.0, 1253.0], [987.0, 1258.3333333333333], [974.0, 1201.6666666666667], [960.0, 1201.0], [963.0, 1199.0], [961.0, 1214.6666666666667], [965.0, 1214.5], [964.0, 1200.0], [967.0, 1193.0], [966.0, 1218.0], [973.0, 1252.0], [972.0, 1230.0], [982.0, 1249.5], [980.0, 1245.0], [979.0, 1248.0], [977.0, 1227.0], [976.0, 1209.0], [1022.0, 1011.0], [1016.0, 988.0], [1004.0, 1233.0], [995.0, 1250.5], [992.0, 1240.0], [1003.0, 1239.0], [1002.0, 1231.0], [1000.0, 1233.0], [1023.0, 1015.5], [1021.0, 1193.1666666666667], [1020.0, 1016.0], [1017.0, 1212.8], [1013.0, 1263.0], [1011.0, 1252.1666666666667], [1008.0, 1237.0], [1028.0, 1010.0], [1032.0, 1182.5000000000002], [1034.0, 1197.0], [1056.0, 1175.0], [1035.0, 1194.5], [1058.0, 1187.0], [1057.0, 1188.0], [1031.0, 1009.0], [1030.0, 1010.0], [1029.0, 1247.0], [1027.0, 1013.5555555555555], [1024.0, 1015.25], [1052.0, 1199.5], [1048.0, 1185.5], [1046.0, 1242.0], [1045.0, 1201.6], [1043.0, 1202.0], [1042.0, 1197.0], [1041.0, 1217.6666666666667], [1025.0, 1169.0], [1026.0, 1022.75], [1060.0, 1187.0], [1059.0, 1187.0], [1.0, 65885.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[579.1553846153835, 5267.2753846153855]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1060.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 133.1, "minX": 1.55426664E12, "maxY": 5059.4, "series": [{"data": [[1.5542667E12, 270.6], [1.55426664E12, 5059.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5542667E12, 133.1], [1.55426664E12, 2488.5666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5542667E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2747.2763371150745, "minX": 1.55426664E12, "maxY": 52383.62121212123, "series": [{"data": [[1.5542667E12, 52383.62121212123], [1.55426664E12, 2747.2763371150745]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5542667E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2747.0640194489456, "minX": 1.55426664E12, "maxY": 52383.166666666664, "series": [{"data": [[1.5542667E12, 52383.166666666664], [1.55426664E12, 2747.0640194489456]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5542667E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 579.5988654781199, "minX": 1.55426664E12, "maxY": 3164.7424242424236, "series": [{"data": [[1.5542667E12, 3164.7424242424236], [1.55426664E12, 579.5988654781199]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5542667E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 467.0, "minX": 1.55426664E12, "maxY": 65885.0, "series": [{"data": [[1.5542667E12, 65885.0], [1.55426664E12, 35868.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5542667E12, 36396.0], [1.55426664E12, 467.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5542667E12, 63705.5], [1.55426664E12, 2791.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5542667E12, 65885.0], [1.55426664E12, 31173.250000000044]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5542667E12, 65037.9], [1.55426664E12, 5242.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5542667E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 806.5, "minX": 1.0, "maxY": 59048.0, "series": [{"data": [[258.0, 1696.5], [1.0, 27872.0], [2.0, 35130.0], [4.0, 46532.5], [41.0, 2523.0], [5.0, 59048.0], [364.0, 806.5], [49.0, 3876.0], [3.0, 38975.5], [461.0, 2230.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 461.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 806.0, "minX": 1.0, "maxY": 59047.0, "series": [{"data": [[258.0, 1696.5], [1.0, 27872.0], [2.0, 35129.0], [4.0, 46532.0], [41.0, 2523.0], [5.0, 59047.0], [364.0, 806.0], [49.0, 3876.0], [3.0, 38974.5], [461.0, 2229.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 461.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.666666666666668, "minX": 1.55426664E12, "maxY": 21.666666666666668, "series": [{"data": [[1.55426664E12, 21.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.55426664E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.55426664E12, "maxY": 20.566666666666666, "series": [{"data": [[1.5542667E12, 1.1], [1.55426664E12, 20.566666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5542667E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.55426664E12, "maxY": 20.566666666666666, "series": [{"data": [[1.5542667E12, 1.1], [1.55426664E12, 20.566666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5542667E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.55426664E12, "maxY": 20.566666666666666, "series": [{"data": [[1.5542667E12, 1.1], [1.55426664E12, 20.566666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5542667E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

